{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed'\n};\nconst initialState = {\n  status: StatusFilters.All,\n  colors: []\n};\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState,\n  reducers: {\n    statusFilterChanged(state, action) {\n      state.status = action.payload;\n    },\n    colorFilterChanged: {\n      reducer(state, action) {\n        let {\n          color,\n          changeType\n        } = action.payload;\n        const {\n          colors\n        } = state;\n        switch (changeType) {\n          case 'added':\n            {\n              if (!colors.includes(color)) {\n                colors.push(color);\n              }\n              break;\n            }\n          case 'removed':\n            {\n              state.colors = colors.filter(existingColor => existingColor !== color);\n            }\n          default:\n            return;\n        }\n      },\n      prepare(color, changeType) {\n        return {\n          payload: {\n            color,\n            changeType\n          }\n        };\n      }\n    }\n  }\n});\nexport const {\n  colorFilterChanged,\n  statusFilterChanged\n} = filtersSlice.actions;\nexport default filtersSlice.reducer;","map":{"version":3,"names":["createSlice","StatusFilters","All","Active","Completed","initialState","status","colors","filtersSlice","name","reducers","statusFilterChanged","state","action","payload","colorFilterChanged","reducer","color","changeType","includes","push","filter","existingColor","prepare","actions"],"sources":["D:/PSU/19thWestcliff/Web403/m6-w2-d2-demo/m6-w2-d2-demo/src/features/filters/filtersSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed',\n}\n\nconst initialState = {\n  status: StatusFilters.All,\n  colors: [],\n}\n\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState,\n  reducers: {\n    statusFilterChanged(state, action) {\n      state.status = action.payload\n    },\n    colorFilterChanged: {\n      reducer(state, action) {\n        let { color, changeType } = action.payload\n        const { colors } = state\n        switch (changeType) {\n          case 'added': {\n            if (!colors.includes(color)) {\n              colors.push(color)\n            }\n            break\n          }\n          case 'removed': {\n            state.colors = colors.filter(\n              (existingColor) => existingColor !== color\n            )\n          }\n          default:\n            return\n        }\n      },\n      prepare(color, changeType) {\n        return {\n          payload: { color, changeType },\n        }\n      },\n    },\n  },\n})\n\nexport const { colorFilterChanged, statusFilterChanged } = filtersSlice.actions\n\nexport default filtersSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,aAAa,GAAG;EAC3BC,GAAG,EAAE,KAAK;EACVC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAEL,aAAa,CAACC,GAAG;EACzBK,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,YAAY,GAAGR,WAAW,CAAC;EAC/BS,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,mBAAmB,CAACC,KAAK,EAAEC,MAAM,EAAE;MACjCD,KAAK,CAACN,MAAM,GAAGO,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDC,kBAAkB,EAAE;MAClBC,OAAO,CAACJ,KAAK,EAAEC,MAAM,EAAE;QACrB,IAAI;UAAEI,KAAK;UAAEC;QAAW,CAAC,GAAGL,MAAM,CAACC,OAAO;QAC1C,MAAM;UAAEP;QAAO,CAAC,GAAGK,KAAK;QACxB,QAAQM,UAAU;UAChB,KAAK,OAAO;YAAE;cACZ,IAAI,CAACX,MAAM,CAACY,QAAQ,CAACF,KAAK,CAAC,EAAE;gBAC3BV,MAAM,CAACa,IAAI,CAACH,KAAK,CAAC;cACpB;cACA;YACF;UACA,KAAK,SAAS;YAAE;cACdL,KAAK,CAACL,MAAM,GAAGA,MAAM,CAACc,MAAM,CACzBC,aAAa,IAAKA,aAAa,KAAKL,KAAK,CAC3C;YACH;UACA;YACE;QAAM;MAEZ,CAAC;MACDM,OAAO,CAACN,KAAK,EAAEC,UAAU,EAAE;QACzB,OAAO;UACLJ,OAAO,EAAE;YAAEG,KAAK;YAAEC;UAAW;QAC/B,CAAC;MACH;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,kBAAkB;EAAEJ;AAAoB,CAAC,GAAGH,YAAY,CAACgB,OAAO;AAE/E,eAAehB,YAAY,CAACQ,OAAO"},"metadata":{},"sourceType":"module"}