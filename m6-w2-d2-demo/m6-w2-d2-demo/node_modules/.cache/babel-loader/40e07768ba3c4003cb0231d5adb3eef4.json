{"ast":null,"code":"var mersenne = require('../vendor/mersenne');\n\n/**\n *\n * @namespace faker.random\n */\nfunction Random(faker, seed) {\n  // Use a user provided seed if it exists\n  if (seed) {\n    if (Array.isArray(seed) && seed.length) {\n      mersenne.seed_array(seed);\n    } else {\n      mersenne.seed(seed);\n    }\n  }\n  /**\n   * returns a single random number based on a max number or range\n   *\n   * @method faker.random.number\n   * @param {mixed} options\n   */\n  this.number = function (options) {\n    if (typeof options === \"number\") {\n      options = {\n        max: options\n      };\n    }\n    options = options || {};\n    if (typeof options.min === \"undefined\") {\n      options.min = 0;\n    }\n    if (typeof options.max === \"undefined\") {\n      options.max = 99999;\n    }\n    if (typeof options.precision === \"undefined\") {\n      options.precision = 1;\n    }\n\n    // Make the range inclusive of the max value\n    var max = options.max;\n    if (max >= 0) {\n      max += options.precision;\n    }\n    var randomNumber = options.precision * Math.floor(mersenne.rand(max / options.precision, options.min / options.precision));\n    return randomNumber;\n  };\n\n  /**\n   * takes an array and returns a random element of the array\n   *\n   * @method faker.random.arrayElement\n   * @param {array} array\n   */\n  this.arrayElement = function (array) {\n    array = array || [\"a\", \"b\", \"c\"];\n    var r = faker.random.number({\n      max: array.length - 1\n    });\n    return array[r];\n  };\n\n  /**\n   * takes an object and returns the randomly key or value\n   *\n   * @method faker.random.objectElement\n   * @param {object} object\n   * @param {mixed} field\n   */\n  this.objectElement = function (object, field) {\n    object = object || {\n      \"foo\": \"bar\",\n      \"too\": \"car\"\n    };\n    var array = Object.keys(object);\n    var key = faker.random.arrayElement(array);\n    return field === \"key\" ? key : object[key];\n  };\n\n  /**\n   * uuid\n   *\n   * @method faker.random.uuid\n   */\n  this.uuid = function () {\n    var self = this;\n    var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n    var replacePlaceholders = function (placeholder) {\n      var random = self.number({\n        min: 0,\n        max: 15\n      });\n      var value = placeholder == 'x' ? random : random & 0x3 | 0x8;\n      return value.toString(16);\n    };\n    return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);\n  };\n\n  /**\n   * boolean\n   *\n   * @method faker.random.boolean\n   */\n  this.boolean = function () {\n    return !!faker.random.number(1);\n  };\n\n  // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc\n  /**\n   * word\n   *\n   * @method faker.random.word\n   * @param {string} type\n   */\n  this.word = function randomWord(type) {\n    var wordMethods = ['commerce.department', 'commerce.productName', 'commerce.productAdjective', 'commerce.productMaterial', 'commerce.product', 'commerce.color', 'company.catchPhraseAdjective', 'company.catchPhraseDescriptor', 'company.catchPhraseNoun', 'company.bsAdjective', 'company.bsBuzz', 'company.bsNoun', 'address.streetSuffix', 'address.county', 'address.country', 'address.state', 'finance.accountName', 'finance.transactionType', 'finance.currencyName', 'hacker.noun', 'hacker.verb', 'hacker.adjective', 'hacker.ingverb', 'hacker.abbreviation', 'name.jobDescriptor', 'name.jobArea', 'name.jobType'];\n\n    // randomly pick from the many faker methods that can generate words\n    var randomWordMethod = faker.random.arrayElement(wordMethods);\n    return faker.fake('{{' + randomWordMethod + '}}');\n  };\n\n  /**\n   * randomWords\n   *\n   * @method faker.random.words\n   * @param {number} count defaults to a random value between 1 and 3\n   */\n  this.words = function randomWords(count) {\n    var words = [];\n    if (typeof count === \"undefined\") {\n      count = faker.random.number({\n        min: 1,\n        max: 3\n      });\n    }\n    for (var i = 0; i < count; i++) {\n      words.push(faker.random.word());\n    }\n    return words.join(' ');\n  };\n\n  /**\n   * locale\n   *\n   * @method faker.random.image\n   */\n  this.image = function randomImage() {\n    return faker.image.image();\n  };\n\n  /**\n   * locale\n   *\n   * @method faker.random.locale\n   */\n  this.locale = function randomLocale() {\n    return faker.random.arrayElement(Object.keys(faker.locales));\n  };\n\n  /**\n   * alphaNumeric\n   *\n   * @method faker.random.alphaNumeric\n   * @param {number} count defaults to 1\n   */\n  this.alphaNumeric = function alphaNumeric(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n    var wholeString = \"\";\n    for (var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]);\n    }\n    return wholeString;\n  };\n  return this;\n}\nmodule['exports'] = Random;","map":{"version":3,"names":["mersenne","require","Random","faker","seed","Array","isArray","length","seed_array","number","options","max","min","precision","randomNumber","Math","floor","rand","arrayElement","array","r","random","objectElement","object","field","Object","keys","key","uuid","self","RFC4122_TEMPLATE","replacePlaceholders","placeholder","value","toString","replace","boolean","word","randomWord","type","wordMethods","randomWordMethod","fake","words","randomWords","count","i","push","join","image","randomImage","locale","randomLocale","locales","alphaNumeric","wholeString","module"],"sources":["D:/PSU/19thWestcliff/Web403/m6-w2-d2-demo/m6-w2-d2-demo/node_modules/faker/lib/random.js"],"sourcesContent":["var mersenne = require('../vendor/mersenne');\n\n/**\n *\n * @namespace faker.random\n */\nfunction Random (faker, seed) {\n  // Use a user provided seed if it exists\n  if (seed) {\n    if (Array.isArray(seed) && seed.length) {\n      mersenne.seed_array(seed);\n    }\n    else {\n      mersenne.seed(seed);\n    }\n  }\n  /**\n   * returns a single random number based on a max number or range\n   *\n   * @method faker.random.number\n   * @param {mixed} options\n   */\n  this.number = function (options) {\n\n    if (typeof options === \"number\") {\n      options = {\n        max: options\n      };\n    }\n\n    options = options || {};\n\n    if (typeof options.min === \"undefined\") {\n      options.min = 0;\n    }\n\n    if (typeof options.max === \"undefined\") {\n      options.max = 99999;\n    }\n    if (typeof options.precision === \"undefined\") {\n      options.precision = 1;\n    }\n\n    // Make the range inclusive of the max value\n    var max = options.max;\n    if (max >= 0) {\n      max += options.precision;\n    }\n\n    var randomNumber = options.precision * Math.floor(\n      mersenne.rand(max / options.precision, options.min / options.precision));\n\n    return randomNumber;\n\n  }\n\n  /**\n   * takes an array and returns a random element of the array\n   *\n   * @method faker.random.arrayElement\n   * @param {array} array\n   */\n  this.arrayElement = function (array) {\n      array = array || [\"a\", \"b\", \"c\"];\n      var r = faker.random.number({ max: array.length - 1 });\n      return array[r];\n  }\n\n  /**\n   * takes an object and returns the randomly key or value\n   *\n   * @method faker.random.objectElement\n   * @param {object} object\n   * @param {mixed} field\n   */\n  this.objectElement = function (object, field) {\n      object = object || { \"foo\": \"bar\", \"too\": \"car\" };\n      var array = Object.keys(object);\n      var key = faker.random.arrayElement(array);\n\n      return field === \"key\" ? key : object[key];\n  }\n\n  /**\n   * uuid\n   *\n   * @method faker.random.uuid\n   */\n  this.uuid = function () {\n      var self = this;\n      var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n      var replacePlaceholders = function (placeholder) {\n          var random = self.number({ min: 0, max: 15 });\n          var value = placeholder == 'x' ? random : (random &0x3 | 0x8);\n          return value.toString(16);\n      };\n      return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);\n  }\n\n  /**\n   * boolean\n   *\n   * @method faker.random.boolean\n   */\n  this.boolean = function () {\n      return !!faker.random.number(1)\n  }\n\n  // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc\n  /**\n   * word\n   *\n   * @method faker.random.word\n   * @param {string} type\n   */\n  this.word = function randomWord (type) {\n\n    var wordMethods = [\n    'commerce.department',\n    'commerce.productName',\n    'commerce.productAdjective',\n    'commerce.productMaterial',\n    'commerce.product',\n    'commerce.color',\n\n    'company.catchPhraseAdjective',\n    'company.catchPhraseDescriptor',\n    'company.catchPhraseNoun',\n    'company.bsAdjective',\n    'company.bsBuzz',\n    'company.bsNoun',\n    'address.streetSuffix',\n    'address.county',\n    'address.country',\n    'address.state',\n\n    'finance.accountName',\n    'finance.transactionType',\n    'finance.currencyName',\n\n    'hacker.noun',\n    'hacker.verb',\n    'hacker.adjective',\n    'hacker.ingverb',\n    'hacker.abbreviation',\n\n    'name.jobDescriptor',\n    'name.jobArea',\n    'name.jobType'];\n\n    // randomly pick from the many faker methods that can generate words\n    var randomWordMethod = faker.random.arrayElement(wordMethods);\n    return faker.fake('{{' + randomWordMethod + '}}');\n\n  }\n\n  /**\n   * randomWords\n   *\n   * @method faker.random.words\n   * @param {number} count defaults to a random value between 1 and 3\n   */\n  this.words = function randomWords (count) {\n    var words = [];\n    if (typeof count === \"undefined\") {\n      count = faker.random.number({min:1, max: 3});\n    }\n    for (var i = 0; i<count; i++) {\n      words.push(faker.random.word());\n    }\n    return words.join(' ');\n  }\n\n  /**\n   * locale\n   *\n   * @method faker.random.image\n   */\n  this.image = function randomImage () {\n    return faker.image.image();\n  }\n\n  /**\n   * locale\n   *\n   * @method faker.random.locale\n   */\n  this.locale = function randomLocale () {\n    return faker.random.arrayElement(Object.keys(faker.locales));\n  };\n\n  /**\n   * alphaNumeric\n   *\n   * @method faker.random.alphaNumeric\n   * @param {number} count defaults to 1\n   */\n  this.alphaNumeric = function alphaNumeric(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    var wholeString = \"\";\n    for(var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]);\n    }\n\n    return wholeString;\n  };\n\n  return this;\n\n}\n\nmodule['exports'] = Random;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}