{"ast":null,"code":"import { createSlice, createSelector, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nimport { StatusFilters } from '../filters/filtersSlice';\nconst todosAdapter = createEntityAdapter();\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle'\n});\n\n// Thunk functions\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos');\n  return response.todos;\n});\nexport const saveNewTodo = createAsyncThunk('todos/saveNewTodo', async text => {\n  const initialTodo = {\n    text\n  };\n  const response = await client.post('/fakeApi/todos', {\n    todo: initialTodo\n  });\n  return response.todo;\n});\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoToggled(state, action) {\n      const todoId = action.payload;\n      const todo = state.entities[todoId];\n      todo.completed = !todo.completed;\n    },\n    todoColorSelected: {\n      reducer(state, action) {\n        const {\n          color,\n          todoId\n        } = action.payload;\n        state.entities[todoId].color = color;\n      },\n      prepare(todoId, color) {\n        return {\n          payload: {\n            todoId,\n            color\n          }\n        };\n      }\n    },\n    todoDeleted: todosAdapter.removeOne,\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach(todo => {\n        todo.completed = true;\n      });\n    },\n    completedTodosCleared(state, action) {\n      const completedIds = Object.values(state.entities).filter(todo => todo.completed).map(todo => todo.id);\n      todosAdapter.removeMany(state, completedIds);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      todosAdapter.setAll(state, action.payload);\n      state.status = 'idle';\n    }).addCase(saveNewTodo.fulfilled, todosAdapter.addOne);\n  }\n});\nexport const {\n  allTodosCompleted,\n  completedTodosCleared,\n  todoAdded,\n  todoColorSelected,\n  todoDeleted,\n  todoToggled\n} = todosSlice.actions;\nexport default todosSlice.reducer;\nexport const {\n  selectAll: selectTodos,\n  selectById: selectTodoById\n} = todosAdapter.getSelectors(state => state.todos);\nexport const selectTodoIds = createSelector(\n// First, pass one or more \"input selector\" functions:\nselectTodos,\n// Then, an \"output selector\" that receives all the input results as arguments\n// and returns a final result value\ntodos => todos.map(todo => todo.id));\nexport const selectFilteredTodos = createSelector(\n// First input selector: all todos\nselectTodos,\n// Second input selector: all filter values\nstate => state.filters,\n// Output selector: receives both values\n(todos, filters) => {\n  const {\n    status,\n    colors\n  } = filters;\n  const showAllCompletions = status === StatusFilters.All;\n  if (showAllCompletions && colors.length === 0) {\n    return todos;\n  }\n  const completedStatus = status === StatusFilters.Completed;\n  // Return either active or completed todos based on filter\n  return todos.filter(todo => {\n    const statusMatches = showAllCompletions || todo.completed === completedStatus;\n    const colorMatches = colors.length === 0 || colors.includes(todo.color);\n    return statusMatches && colorMatches;\n  });\n});\nexport const selectFilteredTodoIds = createSelector(\n// Pass our other memoized selector as an input\nselectFilteredTodos,\n// And derive data in the output selector\nfilteredTodos => filteredTodos.map(todo => todo.id));","map":{"version":3,"names":["createSlice","createSelector","createAsyncThunk","createEntityAdapter","client","StatusFilters","todosAdapter","initialState","getInitialState","status","fetchTodos","response","get","todos","saveNewTodo","text","initialTodo","post","todo","todosSlice","name","reducers","todoToggled","state","action","todoId","payload","entities","completed","todoColorSelected","reducer","color","prepare","todoDeleted","removeOne","allTodosCompleted","Object","values","forEach","completedTodosCleared","completedIds","filter","map","id","removeMany","extraReducers","builder","addCase","pending","fulfilled","setAll","addOne","todoAdded","actions","selectAll","selectTodos","selectById","selectTodoById","getSelectors","selectTodoIds","selectFilteredTodos","filters","colors","showAllCompletions","All","length","completedStatus","Completed","statusMatches","colorMatches","includes","selectFilteredTodoIds","filteredTodos"],"sources":["D:/PSU/19thWestcliff/Web403/m6-w2-d2-demo/m6-w2-d2-demo/src/features/todos/todosSlice.js"],"sourcesContent":["import {\n  createSlice,\n  createSelector,\n  createAsyncThunk,\n  createEntityAdapter,\n} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\nimport { StatusFilters } from '../filters/filtersSlice'\n\nconst todosAdapter = createEntityAdapter()\n\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle',\n})\n\n// Thunk functions\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos')\n  return response.todos\n})\n\nexport const saveNewTodo = createAsyncThunk(\n  'todos/saveNewTodo',\n  async (text) => {\n    const initialTodo = { text }\n    const response = await client.post('/fakeApi/todos', { todo: initialTodo })\n    return response.todo\n  }\n)\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoToggled(state, action) {\n      const todoId = action.payload\n      const todo = state.entities[todoId]\n      todo.completed = !todo.completed\n    },\n    todoColorSelected: {\n      reducer(state, action) {\n        const { color, todoId } = action.payload\n        state.entities[todoId].color = color\n      },\n      prepare(todoId, color) {\n        return {\n          payload: { todoId, color },\n        }\n      },\n    },\n    todoDeleted: todosAdapter.removeOne,\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach((todo) => {\n        todo.completed = true\n      })\n    },\n    completedTodosCleared(state, action) {\n      const completedIds = Object.values(state.entities)\n        .filter((todo) => todo.completed)\n        .map((todo) => todo.id)\n      todosAdapter.removeMany(state, completedIds)\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodos.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        todosAdapter.setAll(state, action.payload)\n        state.status = 'idle'\n      })\n      .addCase(saveNewTodo.fulfilled, todosAdapter.addOne)\n  },\n})\n\nexport const {\n  allTodosCompleted,\n  completedTodosCleared,\n  todoAdded,\n  todoColorSelected,\n  todoDeleted,\n  todoToggled,\n} = todosSlice.actions\n\nexport default todosSlice.reducer\n\nexport const {\n  selectAll: selectTodos,\n  selectById: selectTodoById,\n} = todosAdapter.getSelectors((state) => state.todos)\n\nexport const selectTodoIds = createSelector(\n  // First, pass one or more \"input selector\" functions:\n  selectTodos,\n  // Then, an \"output selector\" that receives all the input results as arguments\n  // and returns a final result value\n  (todos) => todos.map((todo) => todo.id)\n)\n\nexport const selectFilteredTodos = createSelector(\n  // First input selector: all todos\n  selectTodos,\n  // Second input selector: all filter values\n  (state) => state.filters,\n  // Output selector: receives both values\n  (todos, filters) => {\n    const { status, colors } = filters\n    const showAllCompletions = status === StatusFilters.All\n    if (showAllCompletions && colors.length === 0) {\n      return todos\n    }\n\n    const completedStatus = status === StatusFilters.Completed\n    // Return either active or completed todos based on filter\n    return todos.filter((todo) => {\n      const statusMatches =\n        showAllCompletions || todo.completed === completedStatus\n      const colorMatches = colors.length === 0 || colors.includes(todo.color)\n      return statusMatches && colorMatches\n    })\n  }\n)\n\nexport const selectFilteredTodoIds = createSelector(\n  // Pass our other memoized selector as an input\n  selectFilteredTodos,\n  // And derive data in the output selector\n  (filteredTodos) => filteredTodos.map((todo) => todo.id)\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}