{"ast":null,"code":"/* eslint-disable no-unused-vars */\n\nimport { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs';\nimport faker from 'faker';\nimport seedrandom from 'seedrandom';\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always'\n});\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = false;\nlet rng = seedrandom();\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed');\n  let seedDate;\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem('randomTimestampSeed', randomSeedString);\n  }\n  rng = seedrandom(randomSeedString);\n  faker.seed(seedDate.getTime());\n}\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\nconst randomFromArray = array => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\nconst todoTemplates = [{\n  base: 'Buy $THING',\n  values: ['milk', 'bread', 'cheese', 'toys']\n}, {\n  base: 'Clean $THING',\n  values: ['house', 'yard', 'bedroom', 'car']\n}, {\n  base: 'Read $THING',\n  values: ['newspaper', 'book', 'email']\n}];\nconst generateTodoText = () => {\n  const template = randomFromArray(todoTemplates);\n  const value = randomFromArray(template.values);\n  const text = template.base.replace('$THING', value);\n  return text;\n};\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi';\n    //this.timing = 2000\n\n    this.resource('todos');\n    this.resource('lists');\n    const server = this;\n    this.post('/todos', function (schema, req) {\n      const data = this.normalizedRequestAttrs();\n      if (data.text === 'error') {\n        throw new Error('Could not save the todo!');\n      }\n      const result = server.create('todo', data);\n      return result;\n    });\n  },\n  models: {\n    todo: Model.extend({}),\n    list: Model.extend({\n      todos: hasMany()\n    })\n  },\n  factories: {\n    todo: Factory.extend({\n      id(i) {\n        return Number(i);\n      },\n      text() {\n        return generateTodoText();\n      },\n      completed() {\n        return false;\n      },\n      color() {\n        return '';\n      }\n    })\n  },\n  serializers: {\n    todo: IdSerializer.extend({\n      serialize(object, request) {\n        // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\n        const numerifyId = todo => {\n          todo.id = Number(todo.id);\n        };\n        let json = IdSerializer.prototype.serialize.apply(this, arguments);\n        if (json.todo) {\n          numerifyId(json.todo);\n        } else if (json.todos) {\n          json.todos.forEach(numerifyId);\n        }\n        return json;\n      }\n    }),\n    list: IdSerializer\n  },\n  seeds(server) {\n    server.createList('todo', 5);\n  }\n});","map":{"version":3,"names":["Server","Model","Factory","hasMany","RestSerializer","faker","seedrandom","IdSerializer","extend","serializeIds","useSeededRNG","rng","randomSeedString","localStorage","getItem","seedDate","Date","toISOString","setItem","seed","getTime","getRandomInt","min","max","Math","ceil","floor","randomFromArray","array","index","length","todoTemplates","base","values","generateTodoText","template","value","text","replace","routes","namespace","resource","server","post","schema","req","data","normalizedRequestAttrs","Error","result","create","models","todo","list","todos","factories","id","i","Number","completed","color","serializers","serialize","object","request","numerifyId","json","prototype","apply","arguments","forEach","seeds","createList"],"sources":["D:/PSU/19thWestcliff/Web403/m6-w2-d2-demo/m6-w2-d2-demo/src/api/server.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\nimport { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs'\n\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = false\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst todoTemplates = [\n  { base: 'Buy $THING', values: ['milk', 'bread', 'cheese', 'toys'] },\n  { base: 'Clean $THING', values: ['house', 'yard', 'bedroom', 'car'] },\n  { base: 'Read $THING', values: ['newspaper', 'book', 'email'] },\n]\n\nconst generateTodoText = () => {\n  const template = randomFromArray(todoTemplates)\n  const value = randomFromArray(template.values)\n  const text = template.base.replace('$THING', value)\n  return text\n}\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('todos')\n    this.resource('lists')\n\n    const server = this\n\n    this.post('/todos', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n\n      if (data.text === 'error') {\n        throw new Error('Could not save the todo!')\n      }\n\n      const result = server.create('todo', data)\n      return result\n    })\n  },\n  models: {\n    todo: Model.extend({}),\n    list: Model.extend({\n      todos: hasMany(),\n    }),\n  },\n  factories: {\n    todo: Factory.extend({\n      id(i) {\n        return Number(i)\n      },\n      text() {\n        return generateTodoText()\n      },\n      completed() {\n        return false\n      },\n      color() {\n        return ''\n      },\n    }),\n  },\n  serializers: {\n    todo: IdSerializer.extend({\n      serialize(object, request) {\n        // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\n        const numerifyId = (todo) => {\n          todo.id = Number(todo.id)\n        }\n        let json = IdSerializer.prototype.serialize.apply(this, arguments)\n\n        if (json.todo) {\n          numerifyId(json.todo)\n        } else if (json.todos) {\n          json.todos.forEach(numerifyId)\n        }\n\n        return json\n      },\n    }),\n    list: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('todo', 5)\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}