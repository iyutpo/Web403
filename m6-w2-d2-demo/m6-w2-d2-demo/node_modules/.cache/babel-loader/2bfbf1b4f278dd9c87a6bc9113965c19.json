{"ast":null,"code":"/**\n *\n * @namespace faker.address\n */\nfunction Address(faker) {\n  var f = faker.fake,\n    Helpers = faker.helpers;\n\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n  this.zipCode = function (format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n    return Helpers.replaceSymbols(format);\n  };\n\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   * \n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n  this.city = function (format) {\n    var formats = ['{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}', '{{address.cityPrefix}} {{name.firstName}}', '{{name.firstName}}{{address.citySuffix}}', '{{name.lastName}}{{address.citySuffix}}'];\n    if (typeof format !== \"number\") {\n      format = faker.random.number(formats.length - 1);\n    }\n    return f(formats[format]);\n  };\n\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  };\n\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  };\n\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n  this.streetName = function () {\n    var result;\n    var suffix = faker.address.streetSuffix();\n    if (suffix !== \"\") {\n      suffix = \" \" + suffix;\n    }\n    switch (faker.random.number(1)) {\n      case 0:\n        result = faker.name.lastName() + suffix;\n        break;\n      case 1:\n        result = faker.name.firstName() + suffix;\n        break;\n    }\n    return result;\n  };\n\n  //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n  this.streetAddress = function (useFullAddress) {\n    if (useFullAddress === undefined) {\n      useFullAddress = false;\n    }\n    var address = \"\";\n    switch (faker.random.number(2)) {\n      case 0:\n        address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n        break;\n      case 1:\n        address = Helpers.replaceSymbolWithNumber(\"####\") + \" \" + faker.address.streetName();\n        break;\n      case 2:\n        address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n        break;\n    }\n    return useFullAddress ? address + \" \" + faker.address.secondaryAddress() : address;\n  };\n\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n  this.streetSuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  };\n\n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n  this.streetPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  };\n\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n  this.secondaryAddress = function () {\n    return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(['Apt. ###', 'Suite ###']));\n  };\n\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  };\n\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  };\n\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   */\n  this.countryCode = function () {\n    return faker.random.arrayElement(faker.definitions.address.country_code);\n  };\n\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n  this.state = function (useAbbr) {\n    return faker.random.arrayElement(faker.definitions.address.state);\n  };\n\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n  this.stateAbbr = function () {\n    return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  };\n\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   */\n  this.latitude = function () {\n    return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);\n  };\n\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   */\n  this.longitude = function () {\n    return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);\n  };\n  return this;\n}\nmodule.exports = Address;","map":{"version":3,"names":["Address","faker","f","fake","Helpers","helpers","zipCode","format","localeFormat","definitions","address","postcode","random","arrayElement","replaceSymbols","city","formats","number","length","cityPrefix","city_prefix","citySuffix","city_suffix","streetName","result","suffix","streetSuffix","name","lastName","firstName","streetAddress","useFullAddress","undefined","replaceSymbolWithNumber","secondaryAddress","street_suffix","streetPrefix","street_prefix","county","country","countryCode","country_code","state","useAbbr","stateAbbr","state_abbr","latitude","toFixed","longitude","module","exports"],"sources":["D:/PSU/19thWestcliff/Web403/m6-w2-d2-demo/m6-w2-d2-demo/node_modules/faker/lib/address.js"],"sourcesContent":["/**\n *\n * @namespace faker.address\n */\nfunction Address (faker) {\n  var f = faker.fake,\n      Helpers = faker.helpers;\n\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n  this.zipCode = function(format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n    return Helpers.replaceSymbols(format);\n  }\n\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   * \n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n  this.city = function (format) {\n    var formats = [\n      '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',\n      '{{address.cityPrefix}} {{name.firstName}}',\n      '{{name.firstName}}{{address.citySuffix}}',\n      '{{name.lastName}}{{address.citySuffix}}'\n    ];\n\n    if (typeof format !== \"number\") {\n      format = faker.random.number(formats.length - 1);\n    }\n\n    return f(formats[format]);\n\n  }\n\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  }\n\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  }\n\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n  this.streetName = function () {\n      var result;\n      var suffix = faker.address.streetSuffix();\n      if (suffix !== \"\") {\n          suffix = \" \" + suffix\n      }\n\n      switch (faker.random.number(1)) {\n      case 0:\n          result = faker.name.lastName() + suffix;\n          break;\n      case 1:\n          result = faker.name.firstName() + suffix;\n          break;\n      }\n      return result;\n  }\n\n  //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n  this.streetAddress = function (useFullAddress) {\n      if (useFullAddress === undefined) { useFullAddress = false; }\n      var address = \"\";\n      switch (faker.random.number(2)) {\n      case 0:\n          address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n          break;\n      case 1:\n          address = Helpers.replaceSymbolWithNumber(\"####\") +  \" \" + faker.address.streetName();\n          break;\n      case 2:\n          address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n          break;\n      }\n      return useFullAddress ? (address + \" \" + faker.address.secondaryAddress()) : address;\n  }\n\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n  this.streetSuffix = function () {\n      return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  }\n  \n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n  this.streetPrefix = function () {\n      return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  }\n\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n  this.secondaryAddress = function () {\n      return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(\n          [\n              'Apt. ###',\n              'Suite ###'\n          ]\n      ));\n  }\n\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  }\n\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  }\n\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   */\n  this.countryCode = function () {\n    return faker.random.arrayElement(faker.definitions.address.country_code);\n  }\n\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n  this.state = function (useAbbr) {\n      return faker.random.arrayElement(faker.definitions.address.state);\n  }\n\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n  this.stateAbbr = function () {\n      return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  }\n\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   */\n  this.latitude = function () {\n      return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);\n  }\n\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   */\n  this.longitude = function () {\n      return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);\n  }\n  \n  return this;\n}\n\n\nmodule.exports = Address;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}