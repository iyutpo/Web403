{"version":3,"sources":["../../../src/phong/textured.vert.ts"],"names":[],"mappings":"AAAA;AAGA","sourcesContent":["// @ts-ignore\nimport glsl from 'glslify'\n\nexport default glsl`\n  precision <<FLOAT_PRECISION>> float;\n\n  uniform mat4 viewMatrix;\n  uniform mat4 modelMatrix;\n  uniform mat4 projectionMatrix;\n  \n  const int NUM_POINT_LIGHTS = <<NUM_POINT_LIGHTS>>;\n  uniform vec3 pointLp[NUM_POINT_LIGHTS];\n  \n  attribute vec3 position;\n  attribute vec3 normal;\n  attribute vec2 uv;\n\n  varying vec3 vNormal;\n  varying vec2 vUv;\n  varying vec3 vEye;\n  varying vec3 vRay[NUM_POINT_LIGHTS];\n\n  #pragma glslify: transpose = require('glsl-transpose')\n  #pragma glslify: inverse = require('glsl-inverse')\n\n  void main() {\n    mat4 modelViewMatrix = viewMatrix * modelMatrix;\n    vec4 viewModelPosition = modelViewMatrix * vec4(position, 1.0);\n  \n    mat3 normalMatrix = transpose(inverse(mat3(modelViewMatrix)));\n    vNormal = vec3(normalMatrix * normal);\n\n    for(int i = 0; i < NUM_POINT_LIGHTS; i++) {\n      vec4 lightPosition = viewMatrix * vec4(pointLp[i], 1.0);\n      vRay[i] = viewModelPosition.xyz - lightPosition.xyz;\n    }\n\n    vUv = uv;\n    vEye = -vec3(viewModelPosition.xyz);\n\n\n    gl_Position = projectionMatrix * viewModelPosition;\n  }\n`\n"],"file":"textured.vert.js"}