"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePerspectiveMatrix = usePerspectiveMatrix;
exports.useIdentityMatrix = useIdentityMatrix;
exports.useInvertedMatrix = useInvertedMatrix;

var _react = require("react");

var _glMatrix = require("gl-matrix");

function usePerspectiveMatrix(fov, aspect) {
  var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;
  var configure = arguments.length > 4 ? arguments[4] : undefined;
  var memoized = (0, _react.useMemo)(function () {
    var matrix = _glMatrix.mat4.create();

    var radians = fov * Math.PI / 180;

    _glMatrix.mat4.perspective(matrix, radians, aspect, near, far);

    configure && configure(matrix);
    return matrix;
  }, [fov, aspect, near, far]);
  return memoized;
}

function useIdentityMatrix() {
  var px = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var py = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var pz = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var configure = arguments.length > 3 ? arguments[3] : undefined;
  var memoized = (0, _react.useMemo)(function () {
    var matrix = _glMatrix.mat4.create();

    _glMatrix.mat4.translate(matrix, matrix, [px, py, pz]);

    configure && configure(matrix);
    return matrix;
  }, [px, py, pz]);
  return memoized;
}

function useInvertedMatrix() {
  var px = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var py = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var pz = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var configure = arguments.length > 3 ? arguments[3] : undefined;
  var memoized = (0, _react.useMemo)(function () {
    var matrix = _glMatrix.mat4.create();

    _glMatrix.mat4.translate(matrix, matrix, [px, py, pz]);

    _glMatrix.mat4.invert(matrix, matrix);

    configure && configure(matrix);
    return matrix;
  }, [px, py, pz]);
  return memoized;
}
//# sourceMappingURL=matrices.js.map