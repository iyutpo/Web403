{"version":3,"sources":["../../src/vectors.ts"],"names":["useVector2","x","y","configure","memoized","vector","vec2","create","set","useVector3","z","vec3","useVector4","w","vec4"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,SAASA,UAAT,CAAoBC,CAApB,EAA+BC,CAA/B,EAA0CC,SAA1C,EAAwE;AAC7E,MAAMC,QAAQ,GAAG,oBAAQ,YAAM;AAC7B,QAAMC,MAAM,GAAGC,eAAKC,MAAL,EAAf;;AACAD,mBAAKE,GAAL,CAASH,MAAT,EAAiBJ,CAAjB,EAAoBC,CAApB;;AAEAC,IAAAA,SAAS,IAAIA,SAAS,CAACE,MAAD,CAAtB;AAEA,WAAOA,MAAP;AACD,GAPgB,EAOd,CAACJ,CAAD,EAAIC,CAAJ,CAPc,CAAjB;AASA,SAAOE,QAAP;AACD;;AAEM,SAASK,UAAT,CACLR,CADK,EAELC,CAFK,EAGLQ,CAHK,EAILP,SAJK,EAKL;AACA,MAAMC,QAAQ,GAAG,oBAAQ,YAAM;AAC7B,QAAMC,MAAM,GAAGM,eAAKJ,MAAL,EAAf;;AACAI,mBAAKH,GAAL,CAASH,MAAT,EAAiBJ,CAAjB,EAAoBC,CAApB,EAAuBQ,CAAvB;;AAEAP,IAAAA,SAAS,IAAIA,SAAS,CAACE,MAAD,CAAtB;AAEA,WAAOA,MAAP;AACD,GAPgB,EAOd,CAACJ,CAAD,EAAIC,CAAJ,EAAOQ,CAAP,CAPc,CAAjB;AASA,SAAON,QAAP;AACD;;AAEM,SAASQ,UAAT,CACLX,CADK,EAELC,CAFK,EAGLQ,CAHK,EAILG,CAJK,EAKLV,SALK,EAML;AACA,MAAMC,QAAQ,GAAG,oBAAQ,YAAM;AAC7B,QAAMC,MAAM,GAAGS,eAAKP,MAAL,EAAf;;AACAO,mBAAKN,GAAL,CAASH,MAAT,EAAiBJ,CAAjB,EAAoBC,CAApB,EAAuBQ,CAAvB,EAA0BG,CAA1B;;AAEAV,IAAAA,SAAS,IAAIA,SAAS,CAACE,MAAD,CAAtB;AAEA,WAAOA,MAAP;AACD,GAPgB,EAOd,CAACJ,CAAD,EAAIC,CAAJ,EAAOQ,CAAP,EAAUG,CAAV,CAPc,CAAjB;AASA,SAAOT,QAAP;AACD","sourcesContent":["import { useMemo } from 'react'\nimport { vec2, vec3, vec4 } from 'gl-matrix'\n\nexport function useVector2(x: number, y: number, configure: (v: vec2) => void) {\n  const memoized = useMemo(() => {\n    const vector = vec2.create()\n    vec2.set(vector, x, y)\n\n    configure && configure(vector)\n\n    return vector\n  }, [x, y])\n\n  return memoized\n}\n\nexport function useVector3(\n  x: number,\n  y: number,\n  z: number,\n  configure: (v: vec3) => void,\n) {\n  const memoized = useMemo(() => {\n    const vector = vec3.create()\n    vec3.set(vector, x, y, z)\n\n    configure && configure(vector)\n\n    return vector\n  }, [x, y, z])\n\n  return memoized\n}\n\nexport function useVector4(\n  x: number,\n  y: number,\n  z: number,\n  w: number,\n  configure: (v: vec4) => void,\n) {\n  const memoized = useMemo(() => {\n    const vector = vec4.create()\n    vec4.set(vector, x, y, z, w)\n\n    configure && configure(vector)\n\n    return vector\n  }, [x, y, z, w])\n\n  return memoized\n}\n"],"file":"vectors.js"}