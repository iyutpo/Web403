import { unstable_scheduleCallback as schedulePassiveEffects, unstable_cancelCallback as cancelPassiveEffects } from 'scheduler';
import { GroupNode, CameraNode, MaterialNode, GeometryNode, InstancedNode } from '../sceneGraph';
export declare const hostConfig: {
    schedulePassiveEffects: typeof schedulePassiveEffects;
    cancelPassiveEffects: typeof cancelPassiveEffects;
    now: () => number;
    prepareForCommit: () => void;
    resetAfterCommit: () => void;
    getRootHostContext: () => boolean;
    getChildHostContext: () => boolean;
    shouldSetTextContent: (type: any, props: any) => boolean;
    createInstance: (type: any, props: any, internalInstanceHandle: any) => CameraNode | GeometryNode | InstancedNode | MaterialNode | GroupNode | undefined;
    createTextInstance: (text: any) => any;
    resetTextContent: () => void;
    getPublicInstance: (instance: any) => any;
    appendChildToContainer: (parentInstance: any, child: any) => void;
    removeChildFromContainer: (parentInstance: any, child: any) => void;
    appendInitialChild: (parentInstance: any, child: any) => void;
    appendChild: (parentInstance: any, child: any) => void;
    removeChild: (parentInstance: any, child: any) => void;
    insertBefore: (parentInstance: any, child: any) => void;
    insertInContainerBefore: (parentInstance: any, child: any) => void;
    finalizeInitialChildren: () => void;
    supportsMutation: boolean;
    prepareUpdate: () => boolean;
    commitUpdate: (instance: any, payload: any, type: any, oldProps: any, newProps: any) => void;
};
