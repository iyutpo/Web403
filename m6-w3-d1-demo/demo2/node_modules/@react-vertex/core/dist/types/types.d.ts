import React from 'react';
import { mat4, vec3 } from 'gl-matrix';
export declare type GLContext = WebGLRenderingContext | WebGL2RenderingContext;
export declare type DataFormat = 'U8' | 'U16' | 'U32' | 'I8' | 'I16' | 'I32' | 'F32';
export declare type DataArray = Uint8Array | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | number[];
export declare type TextureOptions = {
    type?: number;
    format?: number;
    internalFormat?: number;
    wrap?: number;
    wrapS?: number;
    wrapT?: number;
    minMag?: number;
    minFilter?: number;
    magFilter?: number;
    mipmaps?: boolean;
    placeholder?: Uint8Array;
    crossOrigin?: string;
};
export declare type GetTextureOptions = (gl: GLContext) => TextureOptions;
export declare type AttributeOptions = {
    type?: number;
    normalized?: boolean;
    stride?: number;
    offset?: number;
    target?: number;
};
export declare type GetAttributeOptions = (gl: GLContext) => AttributeOptions;
export declare type DrawMode = 'TRIANGLES' | 'LINES' | 'POINTS' | 'LINE_STRIP' | 'LINE_LOOP' | 'TRIANGLE_STRIP' | 'TRIANGLE_FAN';
export declare type RenderMaterial = {
    program: WebGLProgram;
    attributes: {
        [name: string]: number;
    };
    attribCount: number;
    uniforms: {
        v: WebGLUniformLocation | null;
        m: WebGLUniformLocation | null;
        p: WebGLUniformLocation | null;
    };
};
export declare type GeometryAttributes = {
    [key: string]: (location: number, ext?: ANGLE_instanced_arrays, glVersion?: number) => void;
};
export declare type GeometryDrawElements = {
    mode: DrawMode;
    type: number;
    count: number;
    offset: number;
};
export declare type InstancedDrawElements = {
    mode: DrawMode;
    type: number;
    count: number;
    offset: number;
    primcount: number;
};
export declare type GeometryDrawArrays = {
    mode: DrawMode;
    first: number;
    count: number;
};
export declare type MatrixProps = {
    matrix?: mat4;
    position?: vec3;
    rotation?: vec3;
    scale?: vec3;
};
export interface CameraNodeProps extends MatrixProps {
    view?: mat4;
    projection?: mat4;
}
export interface MaterialNodeProps extends MatrixProps {
    program?: WebGLProgram;
}
export interface GeometryNodeProps extends MatrixProps {
    index?: number;
    attributes?: GeometryAttributes;
    drawArrays?: GeometryDrawArrays;
    drawElements?: GeometryDrawElements;
}
export interface InstancedNodeProps extends MatrixProps {
    index?: number;
    attributes?: GeometryAttributes;
    drawElements?: InstancedDrawElements;
}
export interface CanvasProps {
    children: React.ReactNode;
    width: number;
    height: number;
    webgl1?: boolean;
    webgl2?: boolean;
    antialias?: boolean;
    textureFlip?: boolean;
    clearColor?: number[];
    canvasClass?: string;
    canvasStyle?: React.CSSProperties;
    extensions?: string[];
    contextAttrs?: Partial<WebGLContextAttributes>;
    renderOnUpdate?: boolean;
    renderOnResize?: boolean;
}
