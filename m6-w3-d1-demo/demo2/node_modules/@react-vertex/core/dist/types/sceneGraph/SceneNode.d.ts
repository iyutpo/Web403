import Node from './GraphNode';
import { MaterialNode } from '.';
import { PointLights } from '../lights';
import { GLContext, RenderMaterial, GeometryAttributes } from '../types';
import GraphNode from './GraphNode';
import { CameraNode } from './CameraNode';
export declare const isSceneNode: unique symbol;
export declare class SceneNode extends Node {
    context: GLContext;
    element: HTMLCanvasElement;
    maxTextures: number;
    extensions: {
        [key: string]: any;
    };
    constructor(canvas: HTMLCanvasElement, extensions: string[], gl: GLContext);
    [isSceneNode]: boolean;
    renderOnUpdate: boolean;
    webglVersion: number;
    pointLights: PointLights;
    clearColor: number[];
    textureUnits: {
        [unit: string]: WebGLTexture | false;
    };
    getTextureUnit(texture?: WebGLTexture | null): number;
    releaseTextureUnit(unit: number): void;
    materialMap: WeakMap<WebGLProgram, RenderMaterial>;
    setMaterial(gl: GLContext, { program }: MaterialNode): RenderMaterial;
    activeAttribCount: number;
    activeAttributes: GeometryAttributes | null;
    render: () => void;
    requestRender: () => void;
    renderNode(node: GraphNode, activeCamera: CameraNode | null, activeMaterial: RenderMaterial | null, needsMatrixUpdate: boolean): void;
}
