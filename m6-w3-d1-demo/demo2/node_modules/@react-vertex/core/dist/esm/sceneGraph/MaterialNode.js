import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import GraphNode from './GraphNode';
export var isMaterialNode = Symbol('isMaterialNode');
export var MaterialNode = /*#__PURE__*/function (_GraphNode) {
  _inherits(MaterialNode, _GraphNode);

  var _super = _createSuper(MaterialNode);

  function MaterialNode() {
    var _this;

    _classCallCheck(this, MaterialNode);

    _this = _super.call(this);
    _this[isMaterialNode] = true;
    _this.program = null;
    return _this;
  }

  _createClass(MaterialNode, [{
    key: "applyProps",
    value: function applyProps(nextprops) {
      var prevProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.applyMatrixProps(nextprops, prevProps);

      if (nextprops.program) {
        this.program = nextprops.program;
      }
    }
  }]);

  return MaterialNode;
}(GraphNode);
//# sourceMappingURL=MaterialNode.js.map