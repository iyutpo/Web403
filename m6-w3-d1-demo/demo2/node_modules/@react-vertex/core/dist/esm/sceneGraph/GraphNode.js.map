{"version":3,"sources":["../../../src/sceneGraph/GraphNode.ts"],"names":["mat4","SceneNode","isGraphNode","Symbol","GraphNode","parent","children","matrix","worldMatrix","needsMatrixUpdate","userManagedMatrix","position","rotation","scale","root","create","child","updateWorldMatrix","push","index","findIndex","d","splice","copy","multiply","identity","translate","x","y","z","rotateX","rotateY","rotateZ","nextprops","prevProps","forEach","c","renderOnUpdate","requestRender"],"mappings":"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","sourcesContent":["import { mat4, vec3 } from 'gl-matrix'\nimport { SceneNode } from './SceneNode'\n\nimport { MatrixProps } from '../types'\n\nexport const isGraphNode = Symbol('isGraphNode')\n\nexport default class GraphNode {\n  parent?: GraphNode\n  children: GraphNode[]\n  matrix: mat4\n  worldMatrix: mat4\n  needsMatrixUpdate: boolean\n  userManagedMatrix: boolean\n\n  position?: vec3\n  rotation?: vec3\n  scale?: vec3\n\n  root?: SceneNode\n\n  constructor() {\n    this.children = []\n    this.matrix = mat4.create()\n    this.worldMatrix = mat4.create()\n    this.needsMatrixUpdate = false\n    this.userManagedMatrix = false\n  }\n\n  [isGraphNode] = true\n\n  add(child: GraphNode) {\n    child.parent = this\n    child.updateWorldMatrix()\n    this.children.push(child)\n  }\n\n  remove(child: GraphNode) {\n    const index = this.children.findIndex(d => d === child)\n\n    if (index >= 0) {\n      delete this.children[index].parent\n      this.children.splice(index, 1)\n    }\n  }\n\n  updateWorldMatrix() {\n    if (this instanceof SceneNode) {\n      mat4.copy(this.worldMatrix, this.matrix)\n    } else if (this.parent) {\n      mat4.multiply(this.worldMatrix, this.parent.worldMatrix, this.matrix)\n    }\n  }\n\n  updateMatrix() {\n    if (this.userManagedMatrix) {\n      return\n    }\n\n    mat4.identity(this.matrix)\n\n    if (this.position) {\n      mat4.translate(this.matrix, this.matrix, this.position)\n    }\n\n    if (this.rotation) {\n      const [x, y, z] = this.rotation\n      x && mat4.rotateX(this.matrix, this.matrix, x)\n      y && mat4.rotateY(this.matrix, this.matrix, y)\n      z && mat4.rotateZ(this.matrix, this.matrix, z)\n    }\n\n    if (this.scale) {\n      mat4.scale(this.matrix, this.matrix, this.scale)\n    }\n  }\n\n  applyMatrixProps(nextprops: MatrixProps, prevProps: MatrixProps) {\n    if (nextprops.matrix) {\n      this.matrix = nextprops.matrix\n      this.userManagedMatrix = true\n      this.updateWorldMatrix()\n\n      this.children.forEach(c => (c.needsMatrixUpdate = true))\n    } else if (\n      nextprops.position !== prevProps.position ||\n      nextprops.rotation !== prevProps.rotation ||\n      nextprops.scale !== prevProps.scale\n    ) {\n      this.position = nextprops.position\n      this.rotation = nextprops.rotation\n      this.scale = nextprops.scale\n\n      this.needsMatrixUpdate = true\n    }\n\n    if (this.root && this.root.renderOnUpdate) {\n      this.root.requestRender()\n    }\n  }\n}\n"],"file":"GraphNode.js"}