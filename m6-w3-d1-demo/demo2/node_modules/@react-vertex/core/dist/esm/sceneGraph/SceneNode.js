import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import throttle from 'lodash.throttle';
import warn from 'warning';
import Node from './GraphNode';
import { instancedExt, MaterialNode } from '.';
import { PointLights } from '../lights';
import { CameraNode } from './CameraNode';
import { GeometryNode } from './GeometryNode';
import { InstancedNode } from './InstancedNode';
export var isSceneNode = Symbol('isSceneNode');

function getMode(gl, modeString) {
  if (!modeString) {
    return gl.TRIANGLES;
  }

  switch (modeString) {
    case 'TRIANGLES':
      return gl.TRIANGLES;

    case 'LINES':
      return gl.LINES;

    case 'POINTS':
      return gl.POINTS;

    case 'LINE_STRIP':
      return gl.LINE_STRIP;

    case 'LINE_LOOP':
      return gl.LINE_LOOP;

    case 'TRIANGLE_STRIP':
      return gl.TRIANGLE_STRIP;

    case 'TRIANGLE_FAN':
      return gl.TRIANGLE_FAN;

    default:
      return gl.TRIANGLES;
  }
}

export var SceneNode = /*#__PURE__*/function (_Node) {
  _inherits(SceneNode, _Node);

  var _super = _createSuper(SceneNode);

  function SceneNode(canvas, extensions, _gl) {
    var _this;

    _classCallCheck(this, SceneNode);

    _this = _super.call(this);
    _this.context = void 0;
    _this.element = void 0;
    _this.maxTextures = void 0;
    _this.extensions = void 0;
    _this[isSceneNode] = true;
    _this.renderOnUpdate = false;
    _this.webglVersion = 1;
    _this.pointLights = new PointLights();
    _this.clearColor = [0, 0, 0, 0];
    _this.textureUnits = {};
    _this.materialMap = new WeakMap();
    _this.activeAttribCount = 0;
    _this.activeAttributes = null;

    _this.render = function () {
      var gl = _this.context;
      gl.enable(gl.DEPTH_TEST);
      gl.clearColor.apply(gl, _toConsumableArray(_this.clearColor));
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      Object.keys(_this.textureUnits).forEach(function (unit) {
        if (_this.textureUnits[unit] !== false) {
          /* @ts-ignore */
          gl.activeTexture(gl["TEXTURE".concat(unit)]);
          gl.bindTexture(gl.TEXTURE_2D, _this.textureUnits[unit]);
        }
      });
      var needsMatrixUpdate = _this.needsMatrixUpdate === true;

      if (needsMatrixUpdate) {
        _this.updateMatrix();

        _this.updateWorldMatrix();

        _this.needsMatrixUpdate = false;
      }

      for (var i = 0; i < _this.children.length; i++) {
        _this.renderNode(_this.children[i], null, null, needsMatrixUpdate);
      }
    };

    _this.requestRender = throttle(_this.render, 17);
    _this.context = _gl;
    _this.element = canvas;
    _this.maxTextures = _gl.getParameter(_gl.MAX_TEXTURE_IMAGE_UNITS);
    _this.extensions = extensions.reduce(function (acc, ext) {
      acc[ext] = _gl.getExtension(ext);
      return acc;
    }, {});
    return _this;
  }

  _createClass(SceneNode, [{
    key: "getTextureUnit",
    value: function getTextureUnit(texture) {
      for (var _unit = 0; _unit < this.maxTextures; _unit++) {
        if (this.textureUnits[_unit] === undefined) {
          this.textureUnits[_unit] = texture || false;
          return _unit;
        }
      }

      warn(false, "Max textures(".concat(this.maxTextures, ") exceeded."));
      return this.maxTextures - 1;
    }
  }, {
    key: "releaseTextureUnit",
    value: function releaseTextureUnit(unit) {
      delete this.textureUnits[unit];
    }
  }, {
    key: "setMaterial",
    value: function setMaterial(gl, _ref) {
      var program = _ref.program;

      if (!program) {
        throw Error('Encountered material with no program.');
      }

      var material = this.materialMap.get(program);

      if (material) {
        return material;
      }

      var attributes = {};
      var attribCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

      for (var i = attribCount - 1; i >= 0; i--) {
        var attr = gl.getActiveAttrib(program, i);

        if (attr) {
          attributes[attr.name] = gl.getAttribLocation(program, attr.name);
        } else {
          warn(false, 'Encountered invalid attribute index.');
        }
      }

      var uniforms = {
        v: gl.getUniformLocation(program, 'viewMatrix'),
        m: gl.getUniformLocation(program, 'modelMatrix'),
        p: gl.getUniformLocation(program, 'projectionMatrix')
      };
      material = {
        program: program,
        uniforms: uniforms,
        attributes: attributes,
        attribCount: attribCount
      };
      this.materialMap.set(program, material);
      return material;
    }
  }, {
    key: "renderNode",
    value: function renderNode(node, activeCamera, activeMaterial, needsMatrixUpdate) {
      var gl = this.context; // *************************************************
      // UPDATE MATRIX IF NEEDED
      // *************************************************

      needsMatrixUpdate = needsMatrixUpdate || node.needsMatrixUpdate === true;

      if (needsMatrixUpdate) {
        node.updateMatrix();
        node.updateWorldMatrix();
        node.needsMatrixUpdate = false;
      } // *************************************************
      // HANDLE CAMERA
      // *************************************************


      if (node instanceof CameraNode) {
        activeCamera = node;
      } // *************************************************
      // HANDLE MATERIAL
      // *************************************************


      if (node instanceof MaterialNode) {
        var nextMaterial = this.setMaterial(gl, node); // note: buffers are deleted when no longer in use by the buffer
        // hooks. So we to disable attribute indexes no longer in use or it
        // will throw an error about no buffer being bound to the index.

        var diff = this.activeAttribCount - nextMaterial.attribCount;

        if (diff > 0) {
          for (var i = 0; i < diff; i++) {
            gl.disableVertexAttribArray(nextMaterial.attribCount + i);
          }
        }

        this.activeAttribCount = nextMaterial.attribCount;
        this.activeAttributes = null;
        activeMaterial = nextMaterial;
        gl.useProgram(activeMaterial.program);

        if (activeCamera) {
          var _activeCamera = activeCamera,
              view = _activeCamera.view,
              projection = _activeCamera.projection;
          gl.uniformMatrix4fv(activeMaterial.uniforms.v, false, view);
          gl.uniformMatrix4fv(activeMaterial.uniforms.p, false, projection);
        }
      } // *************************************************
      // HANDLE GEOMETRY
      // *************************************************


      if (node instanceof GeometryNode) {
        if (activeMaterial) {
          gl.useProgram(activeMaterial.program);

          if (node.attributes !== this.activeAttributes) {
            for (var attr in activeMaterial.attributes) {
              var location = activeMaterial.attributes[attr];
              node.attributes[attr](location);
            }

            this.activeAttributes = node.attributes;
          }

          gl.uniformMatrix4fv(activeMaterial.uniforms.m, false, node.worldMatrix);

          if (node.drawArrays) {
            gl.drawArrays(getMode(gl, node.drawArrays.mode), node.drawArrays.first || 0, node.drawArrays.count);
          } else if (node.drawElements) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, node.index);
            gl.drawElements(getMode(gl, node.drawElements.mode), node.drawElements.count, node.drawElements.type ? // @ts-ignore
            gl[node.drawElements.type] : gl.UNSIGNED_SHORT, node.drawElements.offset || 0);
          }

          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
        }
      } // *************************************************
      // HANDLE INSTANCED GEOMETRY
      // *************************************************


      if (node instanceof InstancedNode) {
        if (activeMaterial) {
          gl.useProgram(activeMaterial.program);

          if (this.extensions[instancedExt] === undefined) {
            this.extensions[instancedExt] = gl.getExtension(instancedExt);
          }

          var ext = this.extensions[instancedExt];

          if (node.attributes !== this.activeAttributes) {
            for (var _attr in activeMaterial.attributes) {
              var _location = activeMaterial.attributes[_attr];

              node.attributes[_attr](_location, ext, this.webglVersion);
            }

            this.activeAttributes = node.attributes;
          }

          gl.uniformMatrix4fv(activeMaterial.uniforms.m, false, node.worldMatrix);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, node.index);

          if (this.webglVersion === 2 && node.drawElements) {
            // @ts-ignore
            gl.drawElementsInstanced(getMode(gl, node.drawElements.mode), node.drawElements.count, node.drawElements.type ? // @ts-ignore
            gl[node.drawElements.type] : gl.UNSIGNED_SHORT, node.drawElements.offset || 0, node.drawElements.primcount);
          } else if (node.drawElements) {
            ext.drawElementsInstancedANGLE(getMode(gl, node.drawElements.mode), node.drawElements.count, node.drawElements.type ? // @ts-ignore
            gl[node.drawElements.type] : gl.UNSIGNED_SHORT, node.drawElements.offset || 0, node.drawElements.primcount);
          }

          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
        }
      }

      for (var _i = 0; _i < node.children.length; _i++) {
        this.renderNode(node.children[_i], activeCamera, activeMaterial, needsMatrixUpdate);
      }
    }
  }]);

  return SceneNode;
}(Node);
//# sourceMappingURL=SceneNode.js.map