import { useEffect, useMemo } from 'react';
import { useDataTexture } from './textures';
import warn from 'warning';
var prefix = 'react-vertex:';
export function useFramebuffer(gl) {
  var memoized = useMemo(function () {
    var buffer = gl.createFramebuffer();
    warn(!!buffer, "".concat(prefix, " Failed to create frame buffer."));
    return buffer;
  }, [gl]);
  useEffect(function () {
    return function () {
      return gl.deleteFramebuffer(memoized);
    };
  }, [gl, memoized]);
  return memoized;
}
export function useFBO(gl, width, height, getTexOpts) {
  var tex = useDataTexture(gl, null, width, height, getTexOpts);
  var fbo = useFramebuffer(gl);
  var memoized = useMemo(function () {
    var attachment = gl.COLOR_ATTACHMENT0;
    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, tex, 0);
    return {
      tex: tex,
      fbo: fbo,
      attach: function attach(unit) {
        gl.activeTexture(gl.TEXTURE0 + unit);
        gl.bindTexture(gl.TEXTURE_2D, tex);
        return unit;
      }
    };
  }, [gl, fbo, tex]);
  return memoized;
}
export function useDoubleFBO(gl, width, height, getTexOpts) {
  var frameBuffer1 = useFBO(gl, width, height, getTexOpts);
  var frameBuffer2 = useFBO(gl, width, height, getTexOpts);
  var memoized = useMemo(function () {
    var fbo1 = frameBuffer1;
    var fbo2 = frameBuffer2;
    return {
      get read() {
        return fbo1;
      },

      set read(value) {
        fbo1 = value;
      },

      get write() {
        return fbo2;
      },

      set write(value) {
        fbo2 = value;
      },

      swap: function swap() {
        var temp = fbo1;
        fbo1 = fbo2;
        fbo2 = temp;
      }
    };
  }, [frameBuffer1, frameBuffer2]);
  return memoized;
}
//# sourceMappingURL=framebuffers.js.map