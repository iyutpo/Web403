{"version":3,"sources":["../../../src/hooks/attributes.ts"],"names":["useMemo","useWebGLVersion","useAttribute","gl","size","buffer","getOptions","memoized","location","options","target","ARRAY_BUFFER","enableVertexAttribArray","bindBuffer","type","FLOAT","normalized","stride","offset","vertexAttribPointer","useInstancedAttribute","version","ext","vertexAttribDivisor","vertexAttribDivisorANGLE","console","log"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\n\nimport { useWebGLVersion } from '../hooks'\nimport { GLContext, GetAttributeOptions } from '../types'\n\nexport function useAttribute(\n  gl: GLContext,\n  size: number,\n  buffer: WebGLBuffer | null,\n  getOptions?: GetAttributeOptions,\n) {\n  const memoized = useMemo(() => {\n    return function(location: number) {\n      if (location >= 0) {\n        const options = getOptions ? getOptions(gl) : {}\n        const target = options.target || gl.ARRAY_BUFFER\n\n        gl.enableVertexAttribArray(location)\n        gl.bindBuffer(target, buffer)\n\n        const type = options.type || gl.FLOAT\n        const normalized = options.normalized || false\n        const stride = options.stride || 0\n        const offset = options.offset || 0\n\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset)\n      }\n    }\n  }, [gl, size, buffer, getOptions])\n\n  return memoized\n}\n\nexport function useInstancedAttribute(\n  gl: GLContext,\n  size: number,\n  buffer: WebGLBuffer | null,\n  getOptions?: GetAttributeOptions,\n) {\n  const version = useWebGLVersion()\n\n  const memoized = useMemo(() => {\n    return function(location: number, ext?: ANGLE_instanced_arrays) {\n      if (location >= 0) {\n        const options = getOptions ? getOptions(gl) : {}\n        const target = options.target || gl.ARRAY_BUFFER\n\n        gl.enableVertexAttribArray(location)\n        gl.bindBuffer(target, buffer)\n\n        const type = options.type || gl.FLOAT\n        const normalized = options.normalized || false\n        const stride = options.stride || 0\n        const offset = options.offset || 0\n\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset)\n\n        if (version === 2) {\n          // @ts-ignore\n          gl.vertexAttribDivisor(location, 1)\n        } else if (ext) {\n          ext.vertexAttribDivisorANGLE(location, 1)\n        } else {\n          console.log('Instanced attributes require WebGL 2 or ANGLE extension')\n        }\n      }\n    }\n  }, [gl, size, buffer, version, getOptions])\n\n  return memoized\n}\n"],"file":"attributes.js"}