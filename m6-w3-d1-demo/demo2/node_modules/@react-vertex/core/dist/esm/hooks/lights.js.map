{"version":3,"sources":["../../../src/hooks/lights.ts"],"names":["useContext","useMemo","useEffect","ReactVertexContext","ctxErr","useUniform3fv","white","origin","usePointLight","color","position","context","Error","pointLights","scene","light","add","updateDiffuse","updatePosition","remove","usePointLightUniforms","gl","program","diffuse","usePointLightCount","vertSource","fragSource","memoizedVert","count","instances","length","replace","memoizedFrag"],"mappings":"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","sourcesContent":["import { useContext, useMemo, useEffect } from 'react'\nimport ReactVertexContext from '../Context'\nimport { ctxErr, useUniform3fv } from '..'\n\nimport { GLContext } from '../types'\n\nconst white = [1, 1, 1]\nconst origin = [0, 0, 0]\n\nexport function usePointLight(color = white, position = origin) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLight ${ctxErr}`)\n  }\n\n  const pointLights = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    return context.scene.pointLights\n  }, [context])\n\n  const light = useMemo(() => {\n    return pointLights.add()\n  }, [pointLights])\n\n  useEffect(() => {\n    pointLights.updateDiffuse(light, color)\n  }, [pointLights, light, color])\n\n  useEffect(() => {\n    pointLights.updatePosition(light, position)\n  }, [pointLights, light, position])\n\n  useEffect(() => {\n    return () => pointLights.remove(light)\n  }, [pointLights, light])\n}\n\nexport function usePointLightUniforms(gl: GLContext, program: WebGLProgram) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLightUniforms ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  useUniform3fv(gl, program, 'pointLd', context.scene.pointLights.diffuse)\n  useUniform3fv(gl, program, 'pointLp', context.scene.pointLights.position)\n}\n\nexport function usePointLightCount(vertSource: string, fragSource: string) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLightCount ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  const memoizedVert = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    const count = context.scene.pointLights.instances.length\n    return vertSource.replace('<<NUM_POINT_LIGHTS>>', `${count}`)\n  }, [vertSource, context.scene.pointLights.instances.length])\n\n  const memoizedFrag = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    const count = context.scene.pointLights.instances.length\n    return fragSource.replace('<<NUM_POINT_LIGHTS>>', `${count}`)\n  }, [fragSource, context.scene.pointLights.instances.length])\n\n  return [memoizedVert, memoizedFrag]\n}\n"],"file":"lights.js"}