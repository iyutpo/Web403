import { useContext, useMemo, useEffect } from 'react';
import ReactVertexContext from '../Context';
import { ctxErr, useUniform3fv } from '..';
var white = [1, 1, 1];
var origin = [0, 0, 0];
export function usePointLight() {
  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : white;
  var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : origin;
  var context = useContext(ReactVertexContext);

  if (!context) {
    throw new Error("usePointLight ".concat(ctxErr));
  }

  var pointLights = useMemo(function () {
    if (!context.scene) {
      throw Error('The scene is not on the context.');
    }

    return context.scene.pointLights;
  }, [context]);
  var light = useMemo(function () {
    return pointLights.add();
  }, [pointLights]);
  useEffect(function () {
    pointLights.updateDiffuse(light, color);
  }, [pointLights, light, color]);
  useEffect(function () {
    pointLights.updatePosition(light, position);
  }, [pointLights, light, position]);
  useEffect(function () {
    return function () {
      return pointLights.remove(light);
    };
  }, [pointLights, light]);
}
export function usePointLightUniforms(gl, program) {
  var context = useContext(ReactVertexContext);

  if (!context) {
    throw new Error("usePointLightUniforms ".concat(ctxErr));
  }

  if (!context.scene) {
    throw Error('The scene is not on the context.');
  }

  useUniform3fv(gl, program, 'pointLd', context.scene.pointLights.diffuse);
  useUniform3fv(gl, program, 'pointLp', context.scene.pointLights.position);
}
export function usePointLightCount(vertSource, fragSource) {
  var context = useContext(ReactVertexContext);

  if (!context) {
    throw new Error("usePointLightCount ".concat(ctxErr));
  }

  if (!context.scene) {
    throw Error('The scene is not on the context.');
  }

  var memoizedVert = useMemo(function () {
    if (!context.scene) {
      throw Error('The scene is not on the context.');
    }

    var count = context.scene.pointLights.instances.length;
    return vertSource.replace('<<NUM_POINT_LIGHTS>>', "".concat(count));
  }, [vertSource, context.scene.pointLights.instances.length]);
  var memoizedFrag = useMemo(function () {
    if (!context.scene) {
      throw Error('The scene is not on the context.');
    }

    var count = context.scene.pointLights.instances.length;
    return fragSource.replace('<<NUM_POINT_LIGHTS>>', "".concat(count));
  }, [fragSource, context.scene.pointLights.instances.length]);
  return [memoizedVert, memoizedFrag];
}
//# sourceMappingURL=lights.js.map