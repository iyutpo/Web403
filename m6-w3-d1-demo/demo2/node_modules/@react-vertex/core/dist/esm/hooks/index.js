import { useContext, useMemo } from 'react';
import ReactVertexContext from '../Context';
export * from './shaders';
export * from './buffers';
export * from './framebuffers';
export * from './lights';
export * from './attributes';
export * from './uniforms';
export * from './textures';
export var ctxErr = 'hook must be used in a React Vertex component tree.';
export function useRender() {
  var context = useContext(ReactVertexContext);

  if (!context) {
    throw Error("useRender ".concat(ctxErr));
  }

  if (!context.scene) {
    throw Error('The scene is not on the context.');
  }

  return context.scene.render;
}
export function useWebGLContext() {
  var context = useContext(ReactVertexContext);

  if (!context) {
    throw new Error("useWebGLContext ".concat(ctxErr));
  }

  if (!context.scene) {
    throw Error('The scene is not on the context.');
  }

  return context.scene.context;
}
export function useWebGLVersion() {
  var context = useContext(ReactVertexContext);

  if (!context) {
    throw new Error("useWebGLVersion ".concat(ctxErr));
  }

  if (!context.scene) {
    throw Error('The scene is not on the context.');
  }

  return context.scene.webglVersion;
}
export function useSceneNode() {
  var context = useContext(ReactVertexContext);

  if (!context.scene) {
    throw Error('The scene is not on the context.');
  }

  return context.scene;
}
export function useCanvas() {
  var context = useContext(ReactVertexContext);

  if (!context) {
    throw new Error("useCanvas ".concat(ctxErr));
  }

  if (!context.scene) {
    throw Error('The scene is not on the context.');
  }

  return context.scene.element;
}
export function useCanvasSize() {
  var context = useContext(ReactVertexContext);

  if (!context) {
    throw new Error("useCanvasSize ".concat(ctxErr));
  }

  if (!context.scene) {
    throw Error('The scene is not on the context.');
  }

  var memoized = useMemo(function () {
    var _context$scene, _context$scene2;

    return {
      width: context.width,
      clientWidth: ((_context$scene = context.scene) === null || _context$scene === void 0 ? void 0 : _context$scene.element.clientWidth) || context.width,
      height: context.height,
      clientHeight: ((_context$scene2 = context.scene) === null || _context$scene2 === void 0 ? void 0 : _context$scene2.element.clientHeight) || context.height
    };
  }, [context.width, context.height, context.scene.element]);
  return memoized;
}
//# sourceMappingURL=index.js.map