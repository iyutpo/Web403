// @ts-nocheck
import { unstable_scheduleCallback as schedulePassiveEffects, unstable_cancelCallback as cancelPassiveEffects } from 'scheduler';
import warn from 'warning';
import { GroupNode, CameraNode, MaterialNode, GeometryNode, InstancedNode } from '../sceneGraph';
var NO_CONTEXT = true;

var NOOP = function NOOP() {};

var addChild = function addChild(parentInstance, child) {
  if (typeof child === 'string') {
    warn(false, 'React Vertex does not support text nodes.');
    return;
  }

  parentInstance.add(child);
};

export var hostConfig = {
  schedulePassiveEffects: schedulePassiveEffects,
  cancelPassiveEffects: cancelPassiveEffects,
  now: Date.now,
  prepareForCommit: NOOP,
  resetAfterCommit: NOOP,
  getRootHostContext: function getRootHostContext() {
    return NO_CONTEXT;
  },
  getChildHostContext: function getChildHostContext() {
    return NO_CONTEXT;
  },
  shouldSetTextContent: function shouldSetTextContent(type, props) {
    return typeof props.children === 'string' || typeof props.children === 'number';
  },
  createInstance: function createInstance(type, props, internalInstanceHandle) {
    var instance;

    switch (type) {
      case 'group':
        instance = new GroupNode();
        instance.root = internalInstanceHandle;
        break;

      case 'camera':
        instance = new CameraNode();
        instance.root = internalInstanceHandle;
        break;

      case 'material':
        instance = new MaterialNode();
        instance.root = internalInstanceHandle;
        break;

      case 'geometry':
        instance = new GeometryNode();
        instance.root = internalInstanceHandle;
        break;

      case 'instancedgeometry':
        instance = new InstancedNode();
        instance.root = internalInstanceHandle;
        break;
    }

    warn(instance, 'React Vertex does not support the type "%s"', type);
    instance.applyProps(props);
    return instance;
  },
  createTextInstance: function createTextInstance(text) {
    return text;
  },
  resetTextContent: NOOP,
  getPublicInstance: function getPublicInstance(instance) {
    return instance;
  },
  appendChildToContainer: addChild,
  removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
    parentInstance.remove(child);
  },
  appendInitialChild: addChild,
  appendChild: addChild,
  removeChild: function removeChild(parentInstance, child) {
    parentInstance.remove(child);
  },
  insertBefore: addChild,
  insertInContainerBefore: addChild,
  finalizeInitialChildren: NOOP,
  supportsMutation: true,
  prepareUpdate: function prepareUpdate() {
    return true;
  },
  commitUpdate: function commitUpdate(instance, payload, type, oldProps, newProps) {
    instance.applyProps(newProps, oldProps);
  }
};
//# sourceMappingURL=hostConfig.js.map