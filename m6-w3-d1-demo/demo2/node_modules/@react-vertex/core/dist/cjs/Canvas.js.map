{"version":3,"sources":["../../src/Canvas.tsx"],"names":["Canvas","sceneNode","state","error","message","canvas","container","contextObject","renderScene","render","current","props","webgl1","webgl2","clearColor","children","antialias","textureFlip","contextAttrs","extensions","renderOnUpdate","attrs","gl","webglVersion","getContext","setState","pixelStorei","UNPACK_FLIP_Y_WEBGL","SceneNode","window","update","updateDimensions","scene","width","height","ReactVertexReconciler","createContainer","updateContainer","dims","renderOnResize","devicePixelRatio","nextWidth","Math","round","nextHeight","style","requestRender","canvasClass","canvasStyle","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;;;;;;;;;IAIqBA,M;;;;;;;;;;;;;;;UACnBC,S;UAEAC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,KADD;AAENC,MAAAA,OAAO,EAAE;AAFH,K;UAKRC,M,gBAAS,uB;UACTC,S;UACAC,a;;UA4IAC,W,GAAc,YAAM;AAClB,UAAI,MAAKP,SAAT,EAAoB;AAClB,cAAKA,SAAL,CAAeQ,MAAf;AACD;AACF,K;;;;;;;wCA1ImB;AAAA,UACVC,OADU,GACE,KAAKL,MADP,CACVK,OADU;AAAA,wBAYd,KAAKC,KAZS;AAAA,0CAGhBC,MAHgB;AAAA,UAGhBA,MAHgB,kCAGP,IAHO;AAAA,2CAIhBC,MAJgB;AAAA,UAIhBA,MAJgB,mCAIP,KAJO;AAAA,8CAKhBC,UALgB;AAAA,UAKhBA,UALgB,sCAKH,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CALG;AAAA,UAMhBC,QANgB,eAMhBA,QANgB;AAAA,8CAOhBC,SAPgB;AAAA,UAOhBA,SAPgB,sCAOJ,KAPI;AAAA,8CAQhBC,WARgB;AAAA,UAQhBA,WARgB,sCAQF,IARE;AAAA,8CAShBC,YATgB;AAAA,UAShBA,YATgB,sCASD,EATC;AAAA,8CAUhBC,UAVgB;AAAA,UAUhBA,UAVgB,sCAUH,EAVG;AAAA,8CAWhBC,cAXgB;AAAA,UAWhBA,cAXgB,sCAWC,KAXD;;AAclB,UAAMC,KAAK;AAAKL,QAAAA,SAAS,EAATA;AAAL,SAAmBE,YAAnB,CAAX;;AAEA,UAAI,CAACR,OAAL,EAAc;AACZ;AACD;;AAED,UAAIY,EAAJ,EAAQC,YAAR;;AAEA,UAAIV,MAAJ,EAAY;AACVS,QAAAA,EAAE,GAAGZ,OAAO,CAACc,UAAR,CAAmB,QAAnB,EAA6BH,KAA7B,CAAL;AACAE,QAAAA,YAAY,GAAG,CAAf;AACD;;AAED,UAAI,CAACD,EAAD,IAAOV,MAAX,EAAmB;AACjBU,QAAAA,EAAE,GAAGZ,OAAO,CAACc,UAAR,CAAmB,OAAnB,EAA4BH,KAA5B,CAAL;AACAE,QAAAA,YAAY,GAAG,CAAf;AACD;;AAED,UAAI,CAACD,EAAL,EAAS;AACP,aAAKG,QAAL,CAAc;AAAEtB,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,OAAO,EAAE;AAAxB,SAAd;AACA;AACD;;AAEDa,MAAAA,WAAW,IAAIK,EAAE,CAACI,WAAH,CAAeJ,EAAE,CAACK,mBAAlB,EAAuC,IAAvC,CAAf;AAEA,WAAK1B,SAAL,GAAiB,IAAI2B,qBAAJ,CAAclB,OAAd,EAAuBS,UAAvB,EAAmCG,EAAnC,CAAjB;;AAEA,UAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;AACpC,aAAKtB,SAAL,CAAesB,YAAf,GAA8BA,YAA9B;AACD;;AAED,WAAKtB,SAAL,CAAea,UAAf,GAA4BA,UAA5B;AACA,WAAKb,SAAL,CAAemB,cAAf,GAAgCA,cAAhC;;AAEA,UAAI,QAAOS,MAAP,0DAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC9B;AACAA,QAAAA,MAAM,CAAC5B,SAAP,GAAmB,KAAKA,SAAxB;AACD;;AAED,UAAM6B,MAAM,GAAG,KAAKC,gBAAL,EAAf;;AAEA,UAAID,MAAJ,EAAY;AACV,aAAKvB,aAAL,GAAqB;AACnByB,UAAAA,KAAK,EAAE,KAAK/B,SADO;AAEnBgC,UAAAA,KAAK,EAAEH,MAAM,CAACG,KAFK;AAGnBC,UAAAA,MAAM,EAAEJ,MAAM,CAACI;AAHI,SAArB;AAKD;;AAED,WAAK5B,SAAL,GAAiB6B,uBAAsBC,eAAtB,CACf,KAAKnC,SADU,EAEf,KAFe,EAGf,KAHe,CAAjB;;AAMA,UAAI,KAAKM,aAAT,EAAwB;AACtB4B,+BAAsBE,eAAtB,eACE,gCAAC,mBAAD,CAAoB,QAApB;AAA6B,UAAA,KAAK,EAAE,KAAK9B;AAAzC,WACGQ,QADH,CADF,EAIE,KAAKT,SAJP,EAKE,IALF,EAME,YAAM,CAAE,CANV;AAQD;AACF;;;yCAEoB;AAAA,UACXS,QADW,GACE,KAAKJ,KADP,CACXI,QADW;AAGnB,UAAMuB,IAAI,GAAG,KAAKP,gBAAL,EAAb;;AAEA,UAAIO,IAAI,IAAIA,IAAI,CAACR,MAAb,IAAuB,KAAKvB,aAAhC,EAA+C;AAC7C,aAAKA,aAAL,mCACK,KAAKA,aADV;AAEE0B,UAAAA,KAAK,EAAEK,IAAI,CAACL,KAFd;AAGEC,UAAAA,MAAM,EAAEI,IAAI,CAACJ;AAHf;AAKD;;AAED,UAAI,KAAK5B,SAAL,IAAkB,KAAKC,aAA3B,EAA0C;AACxC4B,+BAAsBE,eAAtB,eACE,gCAAC,mBAAD,CAAoB,QAApB;AAA6B,UAAA,KAAK,EAAE,KAAK9B;AAAzC,WACGQ,QADH,CADF,EAIE,KAAKT,SAJP,EAKE,IALF,EAME,YAAM,CAAE,CANV;AAQD;AACF;;;uCAEkB;AAAA,UACTI,OADS,GACG,KAAKL,MADR,CACTK,OADS;;AAGjB,UAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AALgB,yBAOyB,KAAKC,KAP9B;AAAA,UAOTsB,KAPS,gBAOTA,KAPS;AAAA,UAOFC,MAPE,gBAOFA,MAPE;AAAA,UAOMK,cAPN,gBAOMA,cAPN;AASjB,UAAMC,gBAAgB,GAAGX,MAAM,CAACW,gBAAP,IAA2B,CAApD;AAEA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWV,KAAK,GAAGO,gBAAnB,CAAlB;AACA,UAAMI,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAWT,MAAM,GAAGM,gBAApB,CAAnB;AAEA,UAAMV,MAAM,GAAGW,SAAS,KAAK/B,OAAO,CAACuB,KAAtB,IAA+BW,UAAU,KAAKlC,OAAO,CAACwB,MAArE;;AAEA,UAAIJ,MAAJ,EAAY;AACVpB,QAAAA,OAAO,CAACmC,KAAR,CAAcZ,KAAd,aAAyBA,KAAzB;AACAvB,QAAAA,OAAO,CAACmC,KAAR,CAAcX,MAAd,aAA0BA,MAA1B;AACAxB,QAAAA,OAAO,CAACuB,KAAR,GAAgBQ,SAAhB;AACA/B,QAAAA,OAAO,CAACwB,MAAR,GAAiBU,UAAjB;AAEAL,QAAAA,cAAc,IAAI,KAAKtC,SAAvB,IAAoC,KAAKA,SAAL,CAAe6C,aAAf,EAApC;AACD;;AAED,aAAO;AAAEb,QAAAA,KAAK,EAAEQ,SAAT;AAAoBP,QAAAA,MAAM,EAAEU,UAA5B;AAAwCd,QAAAA,MAAM,EAANA;AAAxC,OAAP;AACD;;;2CAQsB;AACrB,UAAI,KAAKxB,SAAT,EAAoB;AAClB6B,+BAAsBE,eAAtB,CACE,IADF,EAEE,KAAK/B,SAFP,EAGE,IAHF,EAIE,YAAM,CAAE,CAJV;AAMD;AACF;;;6BAEQ;AAAA,yBACwC,KAAKK,KAD7C;AAAA,+CACCoC,WADD;AAAA,UACCA,WADD,sCACe,EADf;AAAA,+CACmBC,WADnB;AAAA,UACmBA,WADnB,sCACiC,EADjC;AAGP,0BACE;AAAQ,QAAA,GAAG,EAAE,KAAK3C,MAAlB;AAA0B,QAAA,SAAS,EAAE0C,WAArC;AAAkD,QAAA,KAAK,EAAEC;AAAzD,QADF;AAGD;;;EA7KiCC,gB","sourcesContent":["import ReactReconciler from 'react-reconciler'\nimport React, { Component, createRef } from 'react'\nimport ReactVertexReconciler, { SceneNode } from './Reconciler'\nimport ReactVertexContext from './Context'\n\nimport { CanvasProps } from './types'\n\nexport default class Canvas extends Component<CanvasProps> {\n  sceneNode?: SceneNode\n\n  state = {\n    error: false,\n    message: '',\n  }\n\n  canvas = createRef<HTMLCanvasElement>()\n  container?: ReactReconciler.FiberRoot\n  contextObject?: {\n    scene: SceneNode\n    width: number\n    height: number\n  }\n\n  componentDidMount() {\n    const { current } = this.canvas\n    const {\n      webgl1 = true,\n      webgl2 = false,\n      clearColor = [0, 0, 0, 1],\n      children,\n      antialias = false,\n      textureFlip = true,\n      contextAttrs = {},\n      extensions = [],\n      renderOnUpdate = false,\n    } = this.props\n\n    const attrs = { antialias, ...contextAttrs }\n\n    if (!current) {\n      return\n    }\n\n    let gl, webglVersion\n\n    if (webgl2) {\n      gl = current.getContext('webgl2', attrs)\n      webglVersion = 2\n    }\n\n    if (!gl && webgl1) {\n      gl = current.getContext('webgl', attrs)\n      webglVersion = 1\n    }\n\n    if (!gl) {\n      this.setState({ error: true, message: 'Could not create WebGL context.' })\n      return\n    }\n\n    textureFlip && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true)\n\n    this.sceneNode = new SceneNode(current, extensions, gl)\n\n    if (typeof webglVersion === 'number') {\n      this.sceneNode.webglVersion = webglVersion\n    }\n\n    this.sceneNode.clearColor = clearColor\n    this.sceneNode.renderOnUpdate = renderOnUpdate\n\n    if (typeof window === 'object') {\n      // @ts-ignore\n      window.sceneNode = this.sceneNode\n    }\n\n    const update = this.updateDimensions()\n\n    if (update) {\n      this.contextObject = {\n        scene: this.sceneNode,\n        width: update.width,\n        height: update.height,\n      }\n    }\n\n    this.container = ReactVertexReconciler.createContainer(\n      this.sceneNode,\n      false,\n      false,\n    )\n\n    if (this.contextObject) {\n      ReactVertexReconciler.updateContainer(\n        <ReactVertexContext.Provider value={this.contextObject}>\n          {children}\n        </ReactVertexContext.Provider>,\n        this.container,\n        this,\n        () => {},\n      )\n    }\n  }\n\n  componentDidUpdate() {\n    const { children } = this.props\n\n    const dims = this.updateDimensions()\n\n    if (dims && dims.update && this.contextObject) {\n      this.contextObject = {\n        ...this.contextObject,\n        width: dims.width,\n        height: dims.height,\n      }\n    }\n\n    if (this.container && this.contextObject) {\n      ReactVertexReconciler.updateContainer(\n        <ReactVertexContext.Provider value={this.contextObject}>\n          {children}\n        </ReactVertexContext.Provider>,\n        this.container,\n        this,\n        () => {},\n      )\n    }\n  }\n\n  updateDimensions() {\n    const { current } = this.canvas\n\n    if (!current) {\n      return\n    }\n\n    const { width, height, renderOnResize } = this.props\n\n    const devicePixelRatio = window.devicePixelRatio || 1\n\n    const nextWidth = Math.round(width * devicePixelRatio)\n    const nextHeight = Math.round(height * devicePixelRatio)\n\n    const update = nextWidth !== current.width || nextHeight !== current.height\n\n    if (update) {\n      current.style.width = `${width}px`\n      current.style.height = `${height}px`\n      current.width = nextWidth\n      current.height = nextHeight\n\n      renderOnResize && this.sceneNode && this.sceneNode.requestRender()\n    }\n\n    return { width: nextWidth, height: nextHeight, update }\n  }\n\n  renderScene = () => {\n    if (this.sceneNode) {\n      this.sceneNode.render()\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.container) {\n      ReactVertexReconciler.updateContainer(\n        null,\n        this.container,\n        this,\n        () => {},\n      )\n    }\n  }\n\n  render() {\n    const { canvasClass = '', canvasStyle = {} } = this.props\n\n    return (\n      <canvas ref={this.canvas} className={canvasClass} style={canvasStyle} />\n    )\n  }\n}\n"],"file":"Canvas.js"}