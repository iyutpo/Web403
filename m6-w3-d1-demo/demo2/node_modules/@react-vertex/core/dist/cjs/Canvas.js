"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _Reconciler = _interopRequireWildcard(require("./Reconciler"));

var _Context = _interopRequireDefault(require("./Context"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Canvas = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Canvas, _Component);

  var _super = _createSuper(Canvas);

  function Canvas() {
    var _this;

    (0, _classCallCheck2["default"])(this, Canvas);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.sceneNode = void 0;
    _this.state = {
      error: false,
      message: ''
    };
    _this.canvas = /*#__PURE__*/(0, _react.createRef)();
    _this.container = void 0;
    _this.contextObject = void 0;

    _this.renderScene = function () {
      if (_this.sceneNode) {
        _this.sceneNode.render();
      }
    };

    return _this;
  }

  (0, _createClass2["default"])(Canvas, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var current = this.canvas.current;
      var _this$props = this.props,
          _this$props$webgl = _this$props.webgl1,
          webgl1 = _this$props$webgl === void 0 ? true : _this$props$webgl,
          _this$props$webgl2 = _this$props.webgl2,
          webgl2 = _this$props$webgl2 === void 0 ? false : _this$props$webgl2,
          _this$props$clearColo = _this$props.clearColor,
          clearColor = _this$props$clearColo === void 0 ? [0, 0, 0, 1] : _this$props$clearColo,
          children = _this$props.children,
          _this$props$antialias = _this$props.antialias,
          antialias = _this$props$antialias === void 0 ? false : _this$props$antialias,
          _this$props$textureFl = _this$props.textureFlip,
          textureFlip = _this$props$textureFl === void 0 ? true : _this$props$textureFl,
          _this$props$contextAt = _this$props.contextAttrs,
          contextAttrs = _this$props$contextAt === void 0 ? {} : _this$props$contextAt,
          _this$props$extension = _this$props.extensions,
          extensions = _this$props$extension === void 0 ? [] : _this$props$extension,
          _this$props$renderOnU = _this$props.renderOnUpdate,
          renderOnUpdate = _this$props$renderOnU === void 0 ? false : _this$props$renderOnU;

      var attrs = _objectSpread({
        antialias: antialias
      }, contextAttrs);

      if (!current) {
        return;
      }

      var gl, webglVersion;

      if (webgl2) {
        gl = current.getContext('webgl2', attrs);
        webglVersion = 2;
      }

      if (!gl && webgl1) {
        gl = current.getContext('webgl', attrs);
        webglVersion = 1;
      }

      if (!gl) {
        this.setState({
          error: true,
          message: 'Could not create WebGL context.'
        });
        return;
      }

      textureFlip && gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
      this.sceneNode = new _Reconciler.SceneNode(current, extensions, gl);

      if (typeof webglVersion === 'number') {
        this.sceneNode.webglVersion = webglVersion;
      }

      this.sceneNode.clearColor = clearColor;
      this.sceneNode.renderOnUpdate = renderOnUpdate;

      if ((typeof window === "undefined" ? "undefined" : (0, _typeof2["default"])(window)) === 'object') {
        // @ts-ignore
        window.sceneNode = this.sceneNode;
      }

      var update = this.updateDimensions();

      if (update) {
        this.contextObject = {
          scene: this.sceneNode,
          width: update.width,
          height: update.height
        };
      }

      this.container = _Reconciler["default"].createContainer(this.sceneNode, false, false);

      if (this.contextObject) {
        _Reconciler["default"].updateContainer( /*#__PURE__*/_react["default"].createElement(_Context["default"].Provider, {
          value: this.contextObject
        }, children), this.container, this, function () {});
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var children = this.props.children;
      var dims = this.updateDimensions();

      if (dims && dims.update && this.contextObject) {
        this.contextObject = _objectSpread(_objectSpread({}, this.contextObject), {}, {
          width: dims.width,
          height: dims.height
        });
      }

      if (this.container && this.contextObject) {
        _Reconciler["default"].updateContainer( /*#__PURE__*/_react["default"].createElement(_Context["default"].Provider, {
          value: this.contextObject
        }, children), this.container, this, function () {});
      }
    }
  }, {
    key: "updateDimensions",
    value: function updateDimensions() {
      var current = this.canvas.current;

      if (!current) {
        return;
      }

      var _this$props2 = this.props,
          width = _this$props2.width,
          height = _this$props2.height,
          renderOnResize = _this$props2.renderOnResize;
      var devicePixelRatio = window.devicePixelRatio || 1;
      var nextWidth = Math.round(width * devicePixelRatio);
      var nextHeight = Math.round(height * devicePixelRatio);
      var update = nextWidth !== current.width || nextHeight !== current.height;

      if (update) {
        current.style.width = "".concat(width, "px");
        current.style.height = "".concat(height, "px");
        current.width = nextWidth;
        current.height = nextHeight;
        renderOnResize && this.sceneNode && this.sceneNode.requestRender();
      }

      return {
        width: nextWidth,
        height: nextHeight,
        update: update
      };
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.container) {
        _Reconciler["default"].updateContainer(null, this.container, this, function () {});
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          _this$props3$canvasCl = _this$props3.canvasClass,
          canvasClass = _this$props3$canvasCl === void 0 ? '' : _this$props3$canvasCl,
          _this$props3$canvasSt = _this$props3.canvasStyle,
          canvasStyle = _this$props3$canvasSt === void 0 ? {} : _this$props3$canvasSt;
      return /*#__PURE__*/_react["default"].createElement("canvas", {
        ref: this.canvas,
        className: canvasClass,
        style: canvasStyle
      });
    }
  }]);
  return Canvas;
}(_react.Component);

exports["default"] = Canvas;
//# sourceMappingURL=Canvas.js.map