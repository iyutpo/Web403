"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.isGraphNode = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _glMatrix = require("gl-matrix");

var _SceneNode = require("./SceneNode");

var isGraphNode = Symbol('isGraphNode');
exports.isGraphNode = isGraphNode;

var GraphNode = /*#__PURE__*/function () {
  function GraphNode() {
    (0, _classCallCheck2["default"])(this, GraphNode);
    this.parent = void 0;
    this.children = void 0;
    this.matrix = void 0;
    this.worldMatrix = void 0;
    this.needsMatrixUpdate = void 0;
    this.userManagedMatrix = void 0;
    this.position = void 0;
    this.rotation = void 0;
    this.scale = void 0;
    this.root = void 0;
    this[isGraphNode] = true;
    this.children = [];
    this.matrix = _glMatrix.mat4.create();
    this.worldMatrix = _glMatrix.mat4.create();
    this.needsMatrixUpdate = false;
    this.userManagedMatrix = false;
  }

  (0, _createClass2["default"])(GraphNode, [{
    key: "add",
    value: function add(child) {
      child.parent = this;
      child.updateWorldMatrix();
      this.children.push(child);
    }
  }, {
    key: "remove",
    value: function remove(child) {
      var index = this.children.findIndex(function (d) {
        return d === child;
      });

      if (index >= 0) {
        delete this.children[index].parent;
        this.children.splice(index, 1);
      }
    }
  }, {
    key: "updateWorldMatrix",
    value: function updateWorldMatrix() {
      if (this instanceof _SceneNode.SceneNode) {
        _glMatrix.mat4.copy(this.worldMatrix, this.matrix);
      } else if (this.parent) {
        _glMatrix.mat4.multiply(this.worldMatrix, this.parent.worldMatrix, this.matrix);
      }
    }
  }, {
    key: "updateMatrix",
    value: function updateMatrix() {
      if (this.userManagedMatrix) {
        return;
      }

      _glMatrix.mat4.identity(this.matrix);

      if (this.position) {
        _glMatrix.mat4.translate(this.matrix, this.matrix, this.position);
      }

      if (this.rotation) {
        var _this$rotation = (0, _slicedToArray2["default"])(this.rotation, 3),
            x = _this$rotation[0],
            y = _this$rotation[1],
            z = _this$rotation[2];

        x && _glMatrix.mat4.rotateX(this.matrix, this.matrix, x);
        y && _glMatrix.mat4.rotateY(this.matrix, this.matrix, y);
        z && _glMatrix.mat4.rotateZ(this.matrix, this.matrix, z);
      }

      if (this.scale) {
        _glMatrix.mat4.scale(this.matrix, this.matrix, this.scale);
      }
    }
  }, {
    key: "applyMatrixProps",
    value: function applyMatrixProps(nextprops, prevProps) {
      if (nextprops.matrix) {
        this.matrix = nextprops.matrix;
        this.userManagedMatrix = true;
        this.updateWorldMatrix();
        this.children.forEach(function (c) {
          return c.needsMatrixUpdate = true;
        });
      } else if (nextprops.position !== prevProps.position || nextprops.rotation !== prevProps.rotation || nextprops.scale !== prevProps.scale) {
        this.position = nextprops.position;
        this.rotation = nextprops.rotation;
        this.scale = nextprops.scale;
        this.needsMatrixUpdate = true;
      }

      if (this.root && this.root.renderOnUpdate) {
        this.root.requestRender();
      }
    }
  }]);
  return GraphNode;
}();

exports["default"] = GraphNode;
//# sourceMappingURL=GraphNode.js.map