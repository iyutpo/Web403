{"version":3,"sources":["../../../src/sceneGraph/SceneNode.ts"],"names":["isSceneNode","Symbol","getMode","gl","modeString","TRIANGLES","LINES","POINTS","LINE_STRIP","LINE_LOOP","TRIANGLE_STRIP","TRIANGLE_FAN","SceneNode","canvas","extensions","context","element","maxTextures","renderOnUpdate","webglVersion","pointLights","PointLights","clearColor","textureUnits","materialMap","WeakMap","activeAttribCount","activeAttributes","render","enable","DEPTH_TEST","viewport","width","height","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","Object","keys","forEach","unit","activeTexture","bindTexture","TEXTURE_2D","needsMatrixUpdate","updateMatrix","updateWorldMatrix","i","children","length","renderNode","requestRender","getParameter","MAX_TEXTURE_IMAGE_UNITS","reduce","acc","ext","getExtension","texture","undefined","program","Error","material","get","attributes","attribCount","getProgramParameter","ACTIVE_ATTRIBUTES","attr","getActiveAttrib","name","getAttribLocation","uniforms","v","getUniformLocation","m","p","set","node","activeCamera","activeMaterial","CameraNode","MaterialNode","nextMaterial","setMaterial","diff","disableVertexAttribArray","useProgram","view","projection","uniformMatrix4fv","GeometryNode","location","worldMatrix","drawArrays","mode","first","count","drawElements","bindBuffer","ELEMENT_ARRAY_BUFFER","index","type","UNSIGNED_SHORT","offset","ARRAY_BUFFER","InstancedNode","instancedExt","WebGL2RenderingContext","drawElementsInstanced","primcount","drawElementsInstancedANGLE","Node"],"mappings":"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","sourcesContent":["import throttle from 'lodash.throttle'\nimport warn from 'warning'\nimport Node from './GraphNode'\nimport { instancedExt, MaterialNode } from '.'\nimport { PointLights } from '../lights'\nimport {\n  GLContext,\n  DrawMode,\n  RenderMaterial,\n  GeometryAttributes,\n} from '../types'\nimport GraphNode from './GraphNode'\nimport { CameraNode } from './CameraNode'\nimport { GeometryNode } from './GeometryNode'\nimport { InstancedNode } from './InstancedNode'\n\nexport const isSceneNode = Symbol('isSceneNode')\n\nfunction getMode(gl: GLContext, modeString: DrawMode) {\n  if (!modeString) {\n    return gl.TRIANGLES\n  }\n\n  switch (modeString) {\n    case 'TRIANGLES':\n      return gl.TRIANGLES\n    case 'LINES':\n      return gl.LINES\n    case 'POINTS':\n      return gl.POINTS\n    case 'LINE_STRIP':\n      return gl.LINE_STRIP\n    case 'LINE_LOOP':\n      return gl.LINE_LOOP\n    case 'TRIANGLE_STRIP':\n      return gl.TRIANGLE_STRIP\n    case 'TRIANGLE_FAN':\n      return gl.TRIANGLE_FAN\n    default:\n      return gl.TRIANGLES\n  }\n}\n\nexport class SceneNode extends Node {\n  context: GLContext\n  element: HTMLCanvasElement\n  maxTextures: number\n  extensions: { [key: string]: any }\n  constructor(canvas: HTMLCanvasElement, extensions: string[], gl: GLContext) {\n    super()\n\n    this.context = gl\n    this.element = canvas\n\n    this.maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)\n\n    this.extensions = extensions.reduce((acc, ext) => {\n      acc[ext] = gl.getExtension(ext)\n      return acc\n    }, {} as any)\n  }\n\n  [isSceneNode] = true\n  renderOnUpdate = false\n  webglVersion = 1\n\n  pointLights = new PointLights()\n  clearColor: [number, number, number, number] = [0, 0, 0, 0]\n\n  textureUnits: { [unit: string]: WebGLTexture | false } = {}\n\n  getTextureUnit(texture?: WebGLTexture) {\n    for (let unit = 0; unit < this.maxTextures; unit++) {\n      if (this.textureUnits[unit] === undefined) {\n        this.textureUnits[unit] = texture || false\n        return unit\n      }\n    }\n\n    warn(false, `Max textures(${this.maxTextures}) exceeded.`)\n\n    return this.maxTextures - 1\n  }\n\n  releaseTextureUnit(unit: number) {\n    delete this.textureUnits[unit]\n  }\n\n  materialMap = new WeakMap<WebGLProgram, RenderMaterial>()\n\n  setMaterial(gl: GLContext, { program }: MaterialNode) {\n    if (!program) {\n      throw Error('Encountered material with no program.')\n    }\n\n    let material = this.materialMap.get(program)\n\n    if (material) {\n      return material\n    }\n\n    const attributes: { [name: string]: number } = {}\n\n    const attribCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n\n    for (let i = attribCount - 1; i >= 0; i--) {\n      const attr = gl.getActiveAttrib(program, i)\n\n      if (attr) {\n        attributes[attr.name] = gl.getAttribLocation(program, attr.name)\n      } else {\n        warn(false, 'Encountered invalid attribute index.')\n      }\n    }\n\n    const uniforms = {\n      v: gl.getUniformLocation(program, 'viewMatrix'),\n      m: gl.getUniformLocation(program, 'modelMatrix'),\n      p: gl.getUniformLocation(program, 'projectionMatrix'),\n    }\n\n    material = { program, uniforms, attributes, attribCount }\n\n    this.materialMap.set(program, material)\n\n    return material\n  }\n\n  activeAttribCount = 0\n  activeAttributes: GeometryAttributes | null = null\n\n  render = () => {\n    const gl = this.context\n\n    gl.enable(gl.DEPTH_TEST)\n    gl.clearColor(...this.clearColor)\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n    Object.keys(this.textureUnits).forEach(unit => {\n      if (this.textureUnits[unit] !== false) {\n        /* @ts-ignore */\n        gl.activeTexture(gl[`TEXTURE${unit}`])\n        gl.bindTexture(gl.TEXTURE_2D, this.textureUnits[unit])\n      }\n    })\n\n    const needsMatrixUpdate = this.needsMatrixUpdate === true\n\n    if (needsMatrixUpdate) {\n      this.updateMatrix()\n      this.updateWorldMatrix()\n      this.needsMatrixUpdate = false\n    }\n\n    for (let i = 0; i < this.children.length; i++) {\n      this.renderNode(this.children[i], null, null, needsMatrixUpdate)\n    }\n  }\n\n  requestRender: () => void = throttle(this.render, 17)\n\n  renderNode(\n    node: GraphNode,\n    activeCamera: CameraNode | null,\n    activeMaterial: RenderMaterial | null,\n    needsMatrixUpdate: boolean,\n  ) {\n    const gl = this.context\n\n    // *************************************************\n    // UPDATE MATRIX IF NEEDED\n    // *************************************************\n    needsMatrixUpdate = needsMatrixUpdate || node.needsMatrixUpdate === true\n\n    if (needsMatrixUpdate) {\n      node.updateMatrix()\n      node.updateWorldMatrix()\n      node.needsMatrixUpdate = false\n    }\n\n    // *************************************************\n    // HANDLE CAMERA\n    // *************************************************\n\n    if (node instanceof CameraNode) {\n      activeCamera = node\n    }\n\n    // *************************************************\n    // HANDLE MATERIAL\n    // *************************************************\n\n    if (node instanceof MaterialNode) {\n      const nextMaterial = this.setMaterial(gl, node)\n\n      // note: buffers are deleted when no longer in use by the buffer\n      // hooks. So we to disable attribute indexes no longer in use or it\n      // will throw an error about no buffer being bound to the index.\n      const diff = this.activeAttribCount - nextMaterial.attribCount\n\n      if (diff > 0) {\n        for (let i = 0; i < diff; i++) {\n          gl.disableVertexAttribArray(nextMaterial.attribCount + i)\n        }\n      }\n\n      this.activeAttribCount = nextMaterial.attribCount\n      this.activeAttributes = null\n\n      activeMaterial = nextMaterial\n\n      gl.useProgram(activeMaterial.program)\n\n      if (activeCamera) {\n        const { view, projection } = activeCamera\n\n        gl.uniformMatrix4fv(activeMaterial.uniforms.v, false, view)\n        gl.uniformMatrix4fv(activeMaterial.uniforms.p, false, projection)\n      }\n    }\n\n    // *************************************************\n    // HANDLE GEOMETRY\n    // *************************************************\n\n    if (node instanceof GeometryNode) {\n      if (activeMaterial) {\n        gl.useProgram(activeMaterial.program)\n\n        if (node.attributes !== this.activeAttributes) {\n          for (const attr in activeMaterial.attributes) {\n            const location = activeMaterial.attributes[attr]\n            node.attributes[attr](location)\n          }\n\n          this.activeAttributes = node.attributes\n        }\n\n        gl.uniformMatrix4fv(activeMaterial.uniforms.m, false, node.worldMatrix)\n\n        if (node.drawArrays) {\n          gl.drawArrays(\n            getMode(gl, node.drawArrays.mode),\n            node.drawArrays.first || 0,\n            node.drawArrays.count,\n          )\n        } else if (node.drawElements) {\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, node.index)\n\n          gl.drawElements(\n            getMode(gl, node.drawElements.mode),\n            node.drawElements.count,\n            node.drawElements.type\n              ? // @ts-ignore\n                gl[node.drawElements.type]\n              : gl.UNSIGNED_SHORT,\n            node.drawElements.offset || 0,\n          )\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)\n        gl.bindBuffer(gl.ARRAY_BUFFER, null)\n      }\n    }\n\n    // *************************************************\n    // HANDLE INSTANCED GEOMETRY\n    // *************************************************\n\n    if (node instanceof InstancedNode) {\n      if (activeMaterial) {\n        gl.useProgram(activeMaterial.program)\n\n        if (this.extensions[instancedExt] === undefined) {\n          this.extensions[instancedExt] = gl.getExtension(instancedExt)\n        }\n\n        const ext = this.extensions[instancedExt]\n\n        if (node.attributes !== this.activeAttributes) {\n          for (const attr in activeMaterial.attributes) {\n            const location = activeMaterial.attributes[attr]\n            node.attributes[attr](location, ext, this.webglVersion)\n          }\n\n          this.activeAttributes = node.attributes\n        }\n\n        gl.uniformMatrix4fv(activeMaterial.uniforms.m, false, node.worldMatrix)\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, node.index)\n\n        if (gl instanceof WebGL2RenderingContext && node.drawElements) {\n          gl.drawElementsInstanced(\n            getMode(gl, node.drawElements.mode),\n            node.drawElements.count,\n            node.drawElements.type\n              ? // @ts-ignore\n                gl[node.drawElements.type]\n              : gl.UNSIGNED_SHORT,\n            node.drawElements.offset || 0,\n            node.drawElements.primcount,\n          )\n        } else if (node.drawElements) {\n          ext.drawElementsInstancedANGLE(\n            getMode(gl, node.drawElements.mode),\n            node.drawElements.count,\n            node.drawElements.type\n              ? // @ts-ignore\n                gl[node.drawElements.type]\n              : gl.UNSIGNED_SHORT,\n            node.drawElements.offset || 0,\n            node.drawElements.primcount,\n          )\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)\n        gl.bindBuffer(gl.ARRAY_BUFFER, null)\n      }\n    }\n\n    for (let i = 0; i < node.children.length; i++) {\n      this.renderNode(\n        node.children[i],\n        activeCamera,\n        activeMaterial,\n        needsMatrixUpdate,\n      )\n    }\n  }\n}\n"],"file":"SceneNode.js"}