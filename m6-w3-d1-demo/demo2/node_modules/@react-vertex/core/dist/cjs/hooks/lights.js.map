{"version":3,"sources":["../../../src/hooks/lights.ts"],"names":["white","origin","usePointLight","color","position","context","ReactVertexContext","Error","ctxErr","pointLights","scene","light","add","updateDiffuse","updatePosition","remove","usePointLightUniforms","gl","program","diffuse","usePointLightCount","vertSource","fragSource","memoizedVert","count","instances","length","replace","memoizedFrag"],"mappings":"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","sourcesContent":["import { useContext, useMemo, useEffect } from 'react'\nimport ReactVertexContext from '../Context'\nimport { ctxErr, useUniform3fv } from '..'\n\nimport { GLContext } from '../types'\n\nconst white = [1, 1, 1]\nconst origin = [0, 0, 0]\n\nexport function usePointLight(color = white, position = origin) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLight ${ctxErr}`)\n  }\n\n  const pointLights = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    return context.scene.pointLights\n  }, [context])\n\n  const light = useMemo(() => {\n    return pointLights.add()\n  }, [pointLights])\n\n  useEffect(() => {\n    pointLights.updateDiffuse(light, color)\n  }, [pointLights, light, color])\n\n  useEffect(() => {\n    pointLights.updatePosition(light, position)\n  }, [pointLights, light, position])\n\n  useEffect(() => {\n    return () => pointLights.remove(light)\n  }, [pointLights, light])\n}\n\nexport function usePointLightUniforms(gl: GLContext, program: WebGLProgram) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLightUniforms ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  useUniform3fv(gl, program, 'pointLd', context.scene.pointLights.diffuse)\n  useUniform3fv(gl, program, 'pointLp', context.scene.pointLights.position)\n}\n\nexport function usePointLightCount(vertSource: string, fragSource: string) {\n  const context = useContext(ReactVertexContext)\n\n  if (!context) {\n    throw new Error(`usePointLightCount ${ctxErr}`)\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.')\n  }\n\n  const memoizedVert = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    const count = context.scene.pointLights.instances.length\n    return vertSource.replace('<<NUM_POINT_LIGHTS>>', `${count}`)\n  }, [vertSource, context.scene.pointLights.instances.length])\n\n  const memoizedFrag = useMemo(() => {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.')\n    }\n\n    const count = context.scene.pointLights.instances.length\n    return fragSource.replace('<<NUM_POINT_LIGHTS>>', `${count}`)\n  }, [fragSource, context.scene.pointLights.instances.length])\n\n  return [memoizedVert, memoizedFrag]\n}\n"],"file":"lights.js"}