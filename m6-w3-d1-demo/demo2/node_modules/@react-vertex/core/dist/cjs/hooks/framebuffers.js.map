{"version":3,"sources":["../../../src/hooks/framebuffers.ts"],"names":["prefix","useFramebuffer","gl","memoized","buffer","createFramebuffer","deleteFramebuffer","useFBO","width","height","getTexOpts","tex","fbo","attachment","COLOR_ATTACHMENT0","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","TEXTURE_2D","attach","unit","activeTexture","TEXTURE0","bindTexture","useDoubleFBO","frameBuffer1","frameBuffer2","fbo1","fbo2","read","value","write","swap","temp"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAIA,IAAMA,MAAM,GAAG,eAAf;;AAEO,SAASC,cAAT,CAAwBC,EAAxB,EAAuC;AAC5C,MAAMC,QAAQ,GAAG,oBAAQ,YAAM;AAC7B,QAAMC,MAAM,GAAGF,EAAE,CAACG,iBAAH,EAAf;AAEA,6BAAK,CAAC,CAACD,MAAP,YAAkBJ,MAAlB;AAEA,WAAOI,MAAP;AACD,GANgB,EAMd,CAACF,EAAD,CANc,CAAjB;AAQA,wBAAU,YAAM;AACd,WAAO;AAAA,aAAMA,EAAE,CAACI,iBAAH,CAAqBH,QAArB,CAAN;AAAA,KAAP;AACD,GAFD,EAEG,CAACD,EAAD,EAAKC,QAAL,CAFH;AAIA,SAAOA,QAAP;AACD;;AAEM,SAASI,MAAT,CACLL,EADK,EAELM,KAFK,EAGLC,MAHK,EAILC,UAJK,EAKL;AACA,MAAMC,GAAG,GAAG,8BAAeT,EAAf,EAAmB,IAAnB,EAAyBM,KAAzB,EAAgCC,MAAhC,EAAwCC,UAAxC,CAAZ;AACA,MAAME,GAAG,GAAGX,cAAc,CAACC,EAAD,CAA1B;AAEA,MAAMC,QAAQ,GAAG,oBAAQ,YAAM;AAC7B,QAAMU,UAAU,GAAGX,EAAE,CAACY,iBAAtB;AACAZ,IAAAA,EAAE,CAACa,eAAH,CAAmBb,EAAE,CAACc,WAAtB,EAAmCJ,GAAnC;AACAV,IAAAA,EAAE,CAACe,oBAAH,CAAwBf,EAAE,CAACc,WAA3B,EAAwCH,UAAxC,EAAoDX,EAAE,CAACgB,UAAvD,EAAmEP,GAAnE,EAAwE,CAAxE;AAEA,WAAO;AACLA,MAAAA,GAAG,EAAHA,GADK;AAELC,MAAAA,GAAG,EAAHA,GAFK;AAGLO,MAAAA,MAHK,kBAGEC,IAHF,EAGgB;AACnBlB,QAAAA,EAAE,CAACmB,aAAH,CAAiBnB,EAAE,CAACoB,QAAH,GAAcF,IAA/B;AACAlB,QAAAA,EAAE,CAACqB,WAAH,CAAerB,EAAE,CAACgB,UAAlB,EAA8BP,GAA9B;AACA,eAAOS,IAAP;AACD;AAPI,KAAP;AASD,GAdgB,EAcd,CAAClB,EAAD,EAAKU,GAAL,EAAUD,GAAV,CAdc,CAAjB;AAgBA,SAAOR,QAAP;AACD;;AAEM,SAASqB,YAAT,CACLtB,EADK,EAELM,KAFK,EAGLC,MAHK,EAILC,UAJK,EAKL;AACA,MAAMe,YAAY,GAAGlB,MAAM,CAACL,EAAD,EAAKM,KAAL,EAAYC,MAAZ,EAAoBC,UAApB,CAA3B;AACA,MAAMgB,YAAY,GAAGnB,MAAM,CAACL,EAAD,EAAKM,KAAL,EAAYC,MAAZ,EAAoBC,UAApB,CAA3B;AAEA,MAAMP,QAAQ,GAAG,oBAAQ,YAAM;AAC7B,QAAIwB,IAAI,GAAGF,YAAX;AACA,QAAIG,IAAI,GAAGF,YAAX;AAEA,WAAO;AACL,UAAIG,IAAJ,GAAW;AACT,eAAOF,IAAP;AACD,OAHI;;AAIL,UAAIE,IAAJ,CAASC,KAAT,EAAgB;AACdH,QAAAA,IAAI,GAAGG,KAAP;AACD,OANI;;AAOL,UAAIC,KAAJ,GAAY;AACV,eAAOH,IAAP;AACD,OATI;;AAUL,UAAIG,KAAJ,CAAUD,KAAV,EAAiB;AACfF,QAAAA,IAAI,GAAGE,KAAP;AACD,OAZI;;AAaLE,MAAAA,IAbK,kBAaE;AACL,YAAMC,IAAI,GAAGN,IAAb;AACAA,QAAAA,IAAI,GAAGC,IAAP;AACAA,QAAAA,IAAI,GAAGK,IAAP;AACD;AAjBI,KAAP;AAmBD,GAvBgB,EAuBd,CAACR,YAAD,EAAeC,YAAf,CAvBc,CAAjB;AAyBA,SAAOvB,QAAP;AACD","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useDataTexture } from './textures'\nimport warn from 'warning'\n\nimport { GLContext, GetTextureOptions } from '../types'\n\nconst prefix = 'react-vertex:'\n\nexport function useFramebuffer(gl: GLContext) {\n  const memoized = useMemo(() => {\n    const buffer = gl.createFramebuffer()\n\n    warn(!!buffer, `${prefix} Failed to create frame buffer.`)\n\n    return buffer\n  }, [gl])\n\n  useEffect(() => {\n    return () => gl.deleteFramebuffer(memoized)\n  }, [gl, memoized])\n\n  return memoized\n}\n\nexport function useFBO(\n  gl: GLContext,\n  width: number,\n  height: number,\n  getTexOpts: GetTextureOptions,\n) {\n  const tex = useDataTexture(gl, null, width, height, getTexOpts)\n  const fbo = useFramebuffer(gl)\n\n  const memoized = useMemo(() => {\n    const attachment = gl.COLOR_ATTACHMENT0\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, tex, 0)\n\n    return {\n      tex,\n      fbo,\n      attach(unit: number) {\n        gl.activeTexture(gl.TEXTURE0 + unit)\n        gl.bindTexture(gl.TEXTURE_2D, tex)\n        return unit\n      },\n    }\n  }, [gl, fbo, tex])\n\n  return memoized\n}\n\nexport function useDoubleFBO(\n  gl: GLContext,\n  width: number,\n  height: number,\n  getTexOpts: GetTextureOptions,\n) {\n  const frameBuffer1 = useFBO(gl, width, height, getTexOpts)\n  const frameBuffer2 = useFBO(gl, width, height, getTexOpts)\n\n  const memoized = useMemo(() => {\n    let fbo1 = frameBuffer1\n    let fbo2 = frameBuffer2\n\n    return {\n      get read() {\n        return fbo1\n      },\n      set read(value) {\n        fbo1 = value\n      },\n      get write() {\n        return fbo2\n      },\n      set write(value) {\n        fbo2 = value\n      },\n      swap() {\n        const temp = fbo1\n        fbo1 = fbo2\n        fbo2 = temp\n      },\n    }\n  }, [frameBuffer1, frameBuffer2])\n\n  return memoized\n}\n"],"file":"framebuffers.js"}