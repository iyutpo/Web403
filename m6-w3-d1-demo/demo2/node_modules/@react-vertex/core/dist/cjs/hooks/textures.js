"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTexture2d = useTexture2d;
exports.useDataTexture = useDataTexture;
exports.useTextureUnit = useTextureUnit;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _ = require("..");

function applyTextureOptions(gl, texture, data, opts) {
  gl.bindTexture(gl.TEXTURE_2D, texture);
  var type = opts.type || gl.UNSIGNED_BYTE;
  var format = opts.format || gl.RGBA;
  var internalFormat = opts.internalFormat || opts.format || gl.RGBA;
  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, format, type, data);
  var wrapS = opts.wrap || opts.wrapS || gl.REPEAT;
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);
  var wrapT = opts.wrap || opts.wrapT || gl.REPEAT;
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);
  var minFilter = opts.minMag || opts.minFilter || gl.NEAREST_MIPMAP_LINEAR;
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
  var magFilter = opts.minMag || opts.magFilter || gl.LINEAR;
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);

  if (opts.mipmaps !== false) {
    gl.generateMipmap(gl.TEXTURE_2D);
  }
}

var defaultPlaceholder = new Uint8Array([0, 0, 0, 1]);

function useTexture2d(url, getOptions) {
  var gl = (0, _.useWebGLContext)();

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  var memoized = (0, _react.useMemo)(function () {
    var texture = gl.createTexture();
    var options = getOptions ? getOptions(gl) : {};
    var placeholder = options.placeholder || defaultPlaceholder;
    gl.bindTexture(gl.TEXTURE_2D, texture); // prettier-ignore

    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, placeholder);
    return texture;
  }, [gl]);
  (0, _react.useEffect)(function () {
    var options = getOptions ? getOptions(gl) : {};

    if (data && memoized) {
      applyTextureOptions(gl, memoized, data, options);
    }
  }, [gl, memoized, data]);
  (0, _react.useEffect)(function () {
    var _ref = getOptions ? getOptions(gl) : {},
        _ref$crossOrigin = _ref.crossOrigin,
        crossOrigin = _ref$crossOrigin === void 0 ? null : _ref$crossOrigin;

    var img = new Image();
    img.crossOrigin = crossOrigin || '';
    img.src = url;
    img.addEventListener('load', function () {
      return setData(img);
    });
  }, [url]);
  return [memoized, !!data];
}

function useDataTexture(gl, data, width, height, getOptions) {
  var memoized = (0, _react.useMemo)(function () {
    var texture = gl.createTexture();
    var options = getOptions ? getOptions(gl) : {};
    gl.bindTexture(gl.TEXTURE_2D, texture);
    var type = options.type || gl.FLOAT;
    var format = options.format || gl.RGBA;
    var internalFormat = options.internalFormat || options.format || gl.RGBA; // prettier-ignore

    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, type, data);
    var minFilter = options.minMag || options.minFilter || gl.NEAREST;
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
    var magFilter = options.minMag || options.magFilter || gl.NEAREST;
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);
    var wrapS = options.wrap || options.wrapS || gl.CLAMP_TO_EDGE;
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);
    var wrapT = options.wrap || options.wrapT || gl.CLAMP_TO_EDGE;
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);
    return texture;
  }, [gl, data, width, height]);
  return memoized;
}

function useTextureUnit() {
  var scene = (0, _.useSceneNode)();
  var memoized = (0, _react.useMemo)(function () {
    return scene.getTextureUnit();
  }, [scene]);
  (0, _react.useEffect)(function () {
    return function () {
      return scene.releaseTextureUnit(memoized);
    };
  }, [scene, memoized]);
  return memoized;
}
//# sourceMappingURL=textures.js.map