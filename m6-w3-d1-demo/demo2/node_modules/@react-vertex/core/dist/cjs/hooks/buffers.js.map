{"version":3,"sources":["../../../src/hooks/buffers.ts"],"names":["prefix","useTypedArray","data","format","memoized","contents","toUpperCase","Uint8Array","from","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Error","useBuffer","gl","isIndex","usage","buffer","createBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","ARRAY_BUFFER","isBuffer","deleteBuffer","useStaticBuffer","STATIC_DRAW","useStreamBuffer","STREAM_DRAW","useDyanmicBuffer","DYNAMIC_DRAW"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport warn from 'warning'\n\nimport { GLContext, DataFormat, DataArray } from '../types'\n\nconst prefix = 'react-vertex:'\n\nexport function useTypedArray(data: DataArray, format: DataFormat | null) {\n  const memoized = useMemo(() => {\n    let contents\n\n    if (format && typeof format === 'string') {\n      switch (format.toUpperCase()) {\n        case 'U8':\n          contents = Uint8Array.from(data)\n          break\n        case 'U16':\n          contents = Uint16Array.from(data)\n          break\n        case 'U32':\n          contents = Uint32Array.from(data)\n          break\n        case 'I8':\n          contents = Int8Array.from(data)\n          break\n        case 'I16':\n          contents = Int16Array.from(data)\n          break\n        case 'I32':\n          contents = Int32Array.from(data)\n          break\n        case 'F32':\n          contents = Float32Array.from(data)\n          break\n      }\n    }\n\n    if (!contents) {\n      if (\n        data instanceof Uint8Array ||\n        data instanceof Uint16Array ||\n        data instanceof Uint32Array ||\n        data instanceof Int8Array ||\n        data instanceof Int16Array ||\n        data instanceof Int32Array ||\n        data instanceof Float32Array\n      ) {\n        return data\n      } else {\n        throw Error('Undable to return typed array instance.')\n      }\n    }\n\n    return contents\n  }, [data, format])\n\n  return memoized\n}\n\nexport function useBuffer(\n  gl: GLContext,\n  data: DataArray,\n  isIndex: boolean = false,\n  format: DataFormat | null,\n  usage: number,\n) {\n  const contents = useTypedArray(data, format)\n\n  const memoized = useMemo(() => {\n    const buffer = gl.createBuffer()\n\n    warn(!!buffer, `${prefix} Failed to create buffer.`)\n\n    return buffer\n  }, [gl])\n\n  useMemo(() => {\n    if (isIndex) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, memoized)\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, contents, usage)\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, memoized)\n      gl.bufferData(gl.ARRAY_BUFFER, contents, usage)\n      gl.bindBuffer(gl.ARRAY_BUFFER, null)\n    }\n  }, [gl, isIndex, usage, contents, memoized])\n\n  useEffect(() => {\n    return () => {\n      gl.isBuffer(memoized) && gl.deleteBuffer(memoized)\n    }\n  }, [gl, memoized])\n\n  return memoized\n}\n\nexport function useStaticBuffer(\n  gl: GLContext,\n  data: DataArray,\n  isIndex: boolean = false,\n  format: DataFormat | null = null,\n) {\n  return useBuffer(gl, data, isIndex, format, gl.STATIC_DRAW)\n}\n\nexport function useStreamBuffer(\n  gl: GLContext,\n  data: DataArray,\n  isIndex: boolean = false,\n  format: DataFormat | null = null,\n) {\n  return useBuffer(gl, data, isIndex, format, gl.STREAM_DRAW)\n}\n\nexport function useDyanmicBuffer(\n  gl: GLContext,\n  data: DataArray,\n  isIndex: boolean = false,\n  format: DataFormat | null = null,\n) {\n  return useBuffer(gl, data, isIndex, format, gl.DYNAMIC_DRAW)\n}\n"],"file":"buffers.js"}