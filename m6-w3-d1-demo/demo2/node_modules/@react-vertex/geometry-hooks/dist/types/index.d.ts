import boxGeometry from './boxGeometry';
import circleGeometry from './circleGeometry';
import cylinderGeometry from './cylinderGeometry';
import planeGeometry from './planeGeometry';
import torusGeometry from './torusGeometry';
import sphereGeometry from './sphereGeometry';
export { boxGeometry, circleGeometry, cylinderGeometry, planeGeometry, torusGeometry, sphereGeometry, };
export declare function useGeometryElements(geometry: {
    vertices: number[];
    normals: number[];
    uvs: number[];
    indices: number[];
}): {
    index: WebGLBuffer | null;
    count: number;
    attributes: {
        position: (location: number) => void;
        normal: (location: number) => void;
        uv: (location: number) => void;
    };
    drawElements: {
        mode: string;
        count: number;
    };
};
export declare function useBoxGeometry(width?: number, height?: number, depth?: number, wCount?: number, hCount?: number, dCount?: number): {
    indices: number[];
    vertices: number[];
    normals: number[];
    uvs: number[];
};
export declare function useBoxElements(width?: number, height?: number, depth?: number, wCount?: number, hCount?: number, dCount?: number): {
    index: WebGLBuffer | null;
    count: number;
    attributes: {
        position: (location: number) => void;
        normal: (location: number) => void;
        uv: (location: number) => void;
    };
    drawElements: {
        mode: string;
        count: number;
    };
};
export declare function useCircleGeometry(radius?: number, segments?: number, thetaStart?: number, thetaLength?: number): {
    indices: number[];
    vertices: any[];
    normals: number[];
    uvs: any[];
};
export declare function useCircleElements(radius?: number, segments?: number, thetaStart?: number, thetaLength?: number): {
    index: WebGLBuffer | null;
    count: number;
    attributes: {
        position: (location: number) => void;
        normal: (location: number) => void;
        uv: (location: number) => void;
    };
    drawElements: {
        mode: string;
        count: number;
    };
};
export declare function useCylinderGeometry(radiusTop?: number, radiusBottom?: number, height?: number, radialSegments?: number, heightSegments?: number, openEnded?: boolean, thetaStart?: number, thetaLength?: number): {
    indices: number[];
    vertices: number[];
    normals: number[];
    uvs: number[];
};
export declare function useCylinderElements(radiusTop?: number, radiusBottom?: number, height?: number, radialSegments?: number, heightSegments?: number, openEnded?: boolean, thetaStart?: number, thetaLength?: number): {
    index: WebGLBuffer | null;
    count: number;
    attributes: {
        position: (location: number) => void;
        normal: (location: number) => void;
        uv: (location: number) => void;
    };
    drawElements: {
        mode: string;
        count: number;
    };
};
export declare function usePlaneGeometry(width?: number, height?: number, widthSegments?: number, heightSegments?: number): {
    indices: number[];
    vertices: number[];
    normals: number[];
    uvs: number[];
};
export declare function usePlaneElements(width?: number, height?: number, widthSegments?: number, heightSegments?: number): {
    index: WebGLBuffer | null;
    count: number;
    attributes: {
        position: (location: number) => void;
        normal: (location: number) => void;
        uv: (location: number) => void;
    };
    drawElements: {
        mode: string;
        count: number;
    };
};
export declare function useTorusGeometry(radius?: number, tube?: number, radialSegments?: number, tubularSegments?: number, arc?: number): {
    indices: number[];
    vertices: any[];
    normals: any[];
    uvs: number[];
};
export declare function useTorusElements(radius?: number, tube?: number, radialSegments?: number, tubularSegments?: number, arc?: number): {
    index: WebGLBuffer | null;
    count: number;
    attributes: {
        position: (location: number) => void;
        normal: (location: number) => void;
        uv: (location: number) => void;
    };
    drawElements: {
        mode: string;
        count: number;
    };
};
export declare function useSphereGeometry(radius?: number, widthSegments?: number, heightSegments?: number, phiStart?: number, phiLength?: number, thetaStart?: number, thetaLength?: number): {
    indices: number[];
    vertices: any[];
    normals: any[];
    uvs: number[];
};
export declare function useSphereElements(radius?: number, widthSegments?: number, heightSegments?: number, phiStart?: number, phiLength?: number, thetaStart?: number, thetaLength?: number): {
    index: WebGLBuffer | null;
    count: number;
    attributes: {
        position: (location: number) => void;
        normal: (location: number) => void;
        uv: (location: number) => void;
    };
    drawElements: {
        mode: string;
        count: number;
    };
};
