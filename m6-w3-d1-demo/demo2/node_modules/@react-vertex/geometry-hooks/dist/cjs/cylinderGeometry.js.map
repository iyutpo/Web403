{"version":3,"sources":["../../src/cylinderGeometry.ts"],"names":["cylinderGeometry","radiusTop","radiusBottom","height","radialSegments","heightSegments","openEnded","thetaStart","thetaLength","undefined","Math","floor","PI","indices","vertices","normals","uvs","index","indexArray","halfHeight","generateTorso","generateCap","x","y","normal","Array","vertex","slope","indexRow","v","radius","u","theta","sinTheta","sin","cosTheta","cos","push","len","sqrt","a","b","c","d","top","centerIndexStart","centerIndexEnd","uv","sign","i"],"mappings":"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","sourcesContent":["// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/CylinderGeometry.js\n\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// prettier-ignore\nexport default function cylinderGeometry(radiusTop: number, radiusBottom: number, height:number, radialSegments:number, heightSegments: number, openEnded: boolean, thetaStart: number, thetaLength: number) {\n  radiusTop = radiusTop !== undefined ? radiusTop : 1\n  radiusBottom = radiusBottom !== undefined ? radiusBottom : 1\n  height = height || 1\n\n  radialSegments = Math.floor(radialSegments) || 8\n  heightSegments = Math.floor(heightSegments) || 1\n\n  openEnded = openEnded !== undefined ? openEnded : false\n  thetaStart = thetaStart !== undefined ? thetaStart : 0.0\n  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2\n\n  const indices: number[] = []\n  const vertices: number[] = []\n  const normals: number[] = []\n  const uvs: number[] = []\n\n  let index = 0\n  const indexArray: number[][] = []\n  const halfHeight = height / 2\n\n  generateTorso()\n\n  if (openEnded === false) {\n    if (radiusTop > 0) generateCap(true)\n    if (radiusBottom > 0) generateCap(false)\n  }\n\n  function generateTorso() {\n    let x, y\n\n    const normal = new Array(3)\n    const vertex = new Array(3)\n\n    const slope = (radiusBottom - radiusTop) / height\n\n    for (y = 0; y <= heightSegments; y++) {\n      const indexRow = []\n\n      const v = y / heightSegments\n      const radius = v * (radiusBottom - radiusTop) + radiusTop\n\n      for (x = 0; x <= radialSegments; x++) {\n        const u = x / radialSegments\n\n        const theta = u * thetaLength + thetaStart\n\n        const sinTheta = Math.sin(theta)\n        const cosTheta = Math.cos(theta)\n\n        vertex[0] = radius * sinTheta\n        vertex[1] = -v * height + halfHeight\n        vertex[2] = radius * cosTheta\n        vertices.push(...vertex)\n\n        normal[0] = sinTheta\n        normal[1] = slope\n        normal[2] = cosTheta\n\n        const len = Math.sqrt(\n          normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2],\n        )\n\n        normal[0] *= 1 / (len || 1)\n        normal[1] *= 1 / (len || 1)\n        normal[2] *= 1 / (len || 1)\n\n        normals.push(...normal)\n\n        uvs.push(u, 1 - v)\n\n        indexRow.push(index++)\n      }\n\n      indexArray.push(indexRow)\n    }\n\n    for (x = 0; x < radialSegments; x++) {\n      for (y = 0; y < heightSegments; y++) {\n        const a = indexArray[y][x]\n        const b = indexArray[y + 1][x]\n        const c = indexArray[y + 1][x + 1]\n        const d = indexArray[y][x + 1]\n\n        indices.push(a, b, d)\n        indices.push(b, c, d)\n      }\n    }\n  }\n\n  function generateCap(top: boolean) {\n    let x, centerIndexStart, centerIndexEnd\n\n    const uv = new Array(2)\n    const vertex = new Array(3)\n\n    const radius = top === true ? radiusTop : radiusBottom\n    const sign = top === true ? 1 : -1\n\n    centerIndexStart = index\n\n    for (x = 1; x <= radialSegments; x++) {\n      vertices.push(0, halfHeight * sign, 0)\n      normals.push(0, sign, 0)\n      uvs.push(0.5, 0.5)\n\n      index++\n    }\n\n    centerIndexEnd = index\n\n    for (x = 0; x <= radialSegments; x++) {\n      const u = x / radialSegments\n      const theta = u * thetaLength + thetaStart\n\n      const cosTheta = Math.cos(theta)\n      const sinTheta = Math.sin(theta)\n\n      vertex[0] = radius * sinTheta\n      vertex[1] = halfHeight * sign\n      vertex[2] = radius * cosTheta\n      vertices.push(...vertex)\n\n      normals.push(0, sign, 0)\n\n      uv[0] = cosTheta * 0.5 + 0.5\n      uv[1] = sinTheta * 0.5 * sign + 0.5\n      uvs.push(...uv)\n\n      index++\n    }\n\n    for (x = 0; x < radialSegments; x++) {\n      const c = centerIndexStart + x\n      const i = centerIndexEnd + x\n\n      if (top === true) {\n        indices.push(i, i + 1, c)\n      } else {\n        indices.push(i + 1, i, c)\n      }\n    }\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"],"file":"cylinderGeometry.js"}