"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGeometryElements = useGeometryElements;
exports.useBoxGeometry = useBoxGeometry;
exports.useBoxElements = useBoxElements;
exports.useCircleGeometry = useCircleGeometry;
exports.useCircleElements = useCircleElements;
exports.useCylinderGeometry = useCylinderGeometry;
exports.useCylinderElements = useCylinderElements;
exports.usePlaneGeometry = usePlaneGeometry;
exports.usePlaneElements = usePlaneElements;
exports.useTorusGeometry = useTorusGeometry;
exports.useTorusElements = useTorusElements;
exports.useSphereGeometry = useSphereGeometry;
exports.useSphereElements = useSphereElements;
Object.defineProperty(exports, "boxGeometry", {
  enumerable: true,
  get: function get() {
    return _boxGeometry["default"];
  }
});
Object.defineProperty(exports, "circleGeometry", {
  enumerable: true,
  get: function get() {
    return _circleGeometry["default"];
  }
});
Object.defineProperty(exports, "cylinderGeometry", {
  enumerable: true,
  get: function get() {
    return _cylinderGeometry["default"];
  }
});
Object.defineProperty(exports, "planeGeometry", {
  enumerable: true,
  get: function get() {
    return _planeGeometry["default"];
  }
});
Object.defineProperty(exports, "torusGeometry", {
  enumerable: true,
  get: function get() {
    return _torusGeometry["default"];
  }
});
Object.defineProperty(exports, "sphereGeometry", {
  enumerable: true,
  get: function get() {
    return _sphereGeometry["default"];
  }
});

var _react = require("react");

var _core = require("@react-vertex/core");

var _boxGeometry = _interopRequireDefault(require("./boxGeometry"));

var _circleGeometry = _interopRequireDefault(require("./circleGeometry"));

var _cylinderGeometry = _interopRequireDefault(require("./cylinderGeometry"));

var _planeGeometry = _interopRequireDefault(require("./planeGeometry"));

var _torusGeometry = _interopRequireDefault(require("./torusGeometry"));

var _sphereGeometry = _interopRequireDefault(require("./sphereGeometry"));

function useGeometryElements(geometry) {
  var gl = (0, _core.useWebGLContext)();
  var positionBuffer = (0, _core.useStaticBuffer)(gl, geometry.vertices, false, 'F32');
  var position = (0, _core.useAttribute)(gl, 3, positionBuffer);
  var normalBuffer = (0, _core.useStaticBuffer)(gl, geometry.normals, false, 'F32');
  var normal = (0, _core.useAttribute)(gl, 3, normalBuffer);
  var uvBuffer = (0, _core.useStaticBuffer)(gl, geometry.uvs, false, 'F32');
  var uv = (0, _core.useAttribute)(gl, 2, uvBuffer);
  var indexBuffer = (0, _core.useStaticBuffer)(gl, geometry.indices, true, 'U16');
  var elements = (0, _react.useMemo)(function () {
    return {
      index: indexBuffer,
      count: geometry.indices.length,
      attributes: {
        position: position,
        normal: normal,
        uv: uv
      },
      drawElements: {
        mode: 'TRIANGLES',
        count: geometry.indices.length
      }
    };
  }, [indexBuffer, geometry.indices.length, position, normal, uv]);
  return elements;
} // prettier-ignore


function useBoxGeometry(width, height, depth, wCount, hCount, dCount) {
  var memoized = (0, _react.useMemo)(function () {
    return (0, _boxGeometry["default"])(width, height, depth, wCount, hCount, dCount);
  }, [width, height, depth, wCount, hCount, dCount]);
  return memoized;
} // prettier-ignore


function useBoxElements(width, height, depth, wCount, hCount, dCount) {
  var geom = useBoxGeometry(width, height, depth, wCount, hCount, dCount);
  var elements = useGeometryElements(geom);
  return elements;
} // prettier-ignore


function useCircleGeometry(radius, segments, thetaStart, thetaLength) {
  var memoized = (0, _react.useMemo)(function () {
    return (0, _circleGeometry["default"])(radius, segments, thetaStart, thetaLength);
  }, [radius, segments, thetaStart, thetaLength]);
  return memoized;
} // prettier-ignore


function useCircleElements(radius, segments, thetaStart, thetaLength) {
  var geom = useCircleGeometry(radius, segments, thetaStart, thetaLength);
  var elements = useGeometryElements(geom);
  return elements;
} // prettier-ignore


function useCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
  var memoized = (0, _react.useMemo)(function () {
    return (0, _cylinderGeometry["default"])(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
  }, [radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength]);
  return memoized;
} // prettier-ignore


function useCylinderElements(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
  var geom = useCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
  var elements = useGeometryElements(geom);
  return elements;
} // prettier-ignore


function usePlaneGeometry(width, height, widthSegments, heightSegments) {
  var memoized = (0, _react.useMemo)(function () {
    return (0, _planeGeometry["default"])(width, height, widthSegments, heightSegments);
  }, [width, height, widthSegments, heightSegments]);
  return memoized;
} // prettier-ignore


function usePlaneElements(width, height, widthSegments, heightSegments) {
  var geom = usePlaneGeometry(width, height, widthSegments, heightSegments);
  var elements = useGeometryElements(geom);
  return elements;
} // prettier-ignore


function useTorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {
  var memoized = (0, _react.useMemo)(function () {
    return (0, _torusGeometry["default"])(radius, tube, radialSegments, tubularSegments, arc);
  }, [radius, tube, radialSegments, tubularSegments, arc]);
  return memoized;
} // prettier-ignore


function useTorusElements(radius, tube, radialSegments, tubularSegments, arc) {
  var geom = useTorusGeometry(radius, tube, radialSegments, tubularSegments, arc);
  var elements = useGeometryElements(geom);
  return elements;
} // prettier-ignore


function useSphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
  var memoized = (0, _react.useMemo)(function () {
    return (0, _sphereGeometry["default"])(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
  }, [radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength]);
  return memoized;
} // prettier-ignore


function useSphereElements(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
  var geom = useSphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
  var elements = useGeometryElements(geom);
  return elements;
}
//# sourceMappingURL=index.js.map