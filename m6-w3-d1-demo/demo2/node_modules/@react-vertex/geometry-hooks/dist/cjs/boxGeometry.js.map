{"version":3,"sources":["../../src/boxGeometry.ts"],"names":["boxGeometry","width","height","depth","wCount","hCount","dCount","Math","floor","indices","vertices","normals","uvs","numberOfVertices","buildPlane","u","v","w","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","ix","iy","vector","Array","y","x","push","a","b","c","d"],"mappings":"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","sourcesContent":["// Adapted from:\n//https://github.com/mrdoob/three.js/blob/dev/src/geometries/BoxGeometry.js\n\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// prettier-ignore\nexport default function boxGeometry(width = 1, height = 1, depth = 1, wCount: number, hCount: number, dCount: number) {\n  wCount = Math.floor(wCount) || 1\n  hCount = Math.floor(hCount) || 1\n  dCount = Math.floor(dCount) || 1\n\n  const indices: number[] = []\n  const vertices: number[] = []\n  const normals: number[] = []\n  const uvs: number[] = []\n\n  let numberOfVertices = 0\n\n  buildPlane(2, 1, 0, -1, -1, depth, height, +width, dCount, hCount)\n  buildPlane(2, 1, 0, +1, -1, depth, height, -width, dCount, hCount)\n  buildPlane(0, 2, 1, +1, +1, width, depth, +height, wCount, dCount)\n  buildPlane(0, 2, 1, +1, -1, width, depth, -height, wCount, dCount)\n  buildPlane(0, 1, 2, +1, -1, width, height, +depth, wCount, hCount)\n  buildPlane(0, 1, 2, -1, -1, width, height, -depth, wCount, hCount)\n\n  function buildPlane(u:number, v:number, w:number, udir: number, vdir: number, width: number, height: number, depth: number, gridX: number, gridY:number) {\n    const segmentWidth = width / gridX\n    const segmentHeight = height / gridY\n\n    const widthHalf = width / 2\n    const heightHalf = height / 2\n    const depthHalf = depth / 2\n\n    const gridX1 = gridX + 1\n    const gridY1 = gridY + 1\n\n    let vertexCounter = 0\n\n    let ix, iy\n\n    const vector = new Array(3)\n\n    for (iy = 0; iy < gridY1; iy++) {\n      var y = iy * segmentHeight - heightHalf\n\n      for (ix = 0; ix < gridX1; ix++) {\n        var x = ix * segmentWidth - widthHalf\n\n        vector[u] = x * udir\n        vector[v] = y * vdir\n        vector[w] = depthHalf\n\n        vertices.push(...vector)\n\n        vector[u] = 0\n        vector[v] = 0\n        vector[w] = depth > 0 ? 1 : -1\n\n        normals.push(...vector)\n\n        uvs.push(ix / gridX)\n        uvs.push(1 - iy / gridY)\n\n        vertexCounter += 1\n      }\n    }\n\n    for (iy = 0; iy < gridY; iy++) {\n      for (ix = 0; ix < gridX; ix++) {\n        var a = numberOfVertices + ix + gridX1 * iy\n        var b = numberOfVertices + ix + gridX1 * (iy + 1)\n        var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1)\n        var d = numberOfVertices + (ix + 1) + gridX1 * iy\n\n        indices.push(a, b, d)\n        indices.push(b, c, d)\n      }\n    }\n\n    numberOfVertices += vertexCounter\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"],"file":"boxGeometry.js"}