{"version":3,"sources":["../../src/torusGeometry.ts"],"names":["torusGeometry","radius","tube","radialSegments","tubularSegments","arc","Math","floor","PI","indices","vertices","normals","uvs","center","Array","vertex","normal","j","i","u","v","cos","sin","push","len","sqrt","a","b","c","d"],"mappings":"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","sourcesContent":["// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/TorusGeometry.js\n\n// @author oosmoxiecode\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// prettier-ignore\nexport default function torusGeometry(radius: number, tube: number, radialSegments:number, tubularSegments: number, arc: number) {\n  radius = radius || 1\n  tube = tube || 0.4\n  radialSegments = Math.floor(radialSegments) || 8\n  tubularSegments = Math.floor(tubularSegments) || 6\n  arc = arc || Math.PI * 2\n\n  const indices = []\n  const vertices = []\n  const normals = []\n  const uvs = []\n\n  const center = new Array(3)\n  const vertex = new Array(3)\n  const normal = new Array(3)\n\n  let j, i\n\n  for (j = 0; j <= radialSegments; j++) {\n    for (i = 0; i <= tubularSegments; i++) {\n      const u = (i / tubularSegments) * arc\n      const v = (j / radialSegments) * Math.PI * 2\n\n      vertex[0] = (radius + tube * Math.cos(v)) * Math.cos(u)\n      vertex[1] = (radius + tube * Math.cos(v)) * Math.sin(u)\n      vertex[2] = tube * Math.sin(v)\n\n      vertices.push(...vertex)\n\n      center[0] = radius * Math.cos(u)\n      center[1] = radius * Math.sin(u)\n      center[2] = 0\n\n      normal[0] = vertex[0] - center[0]\n      normal[1] = vertex[1] - center[1]\n      normal[2] = vertex[2] - center[2]\n\n      const len = Math.sqrt(\n        normal[0] * normal[0] +\n        normal[1] * normal[1] + \n        normal[2] * normal[2]\n      )\n    \n      normal[0] *= 1 / (len || 1)\n      normal[1] *= 1 / (len || 1)\n      normal[2] *= 1 / (len || 1) \n\n      normals.push(...normal)\n\n      uvs.push(i / tubularSegments)\n      uvs.push(j / radialSegments)\n    }\n  }\n\n  for (j = 1; j <= radialSegments; j++) {\n    for (i = 1; i <= tubularSegments; i++) {\n      const a = (tubularSegments + 1) * j + i - 1\n      const b = (tubularSegments + 1) * (j - 1) + i - 1\n      const c = (tubularSegments + 1) * (j - 1) + i\n      const d = (tubularSegments + 1) * j + i\n\n      indices.push(a, b, d)\n      indices.push(b, c, d)\n    }\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"],"file":"torusGeometry.js"}