{"version":3,"sources":["../../src/sphereGeometry.ts"],"names":["SphereGeometry","radius","widthSegments","heightSegments","phiStart","phiLength","thetaStart","thetaLength","Math","max","floor","undefined","PI","thetaEnd","ix","iy","index","grid","vertex","Array","normal","indices","vertices","normals","uvs","verticesRow","v","uOffset","u","cos","sin","push","len","sqrt","a","b","c","d"],"mappings":"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","sourcesContent":["// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/SphereGeometry.js\n\n// @author mrdoob / http://mrdoob.com/\n// @author benaadams / https://twitter.com/ben_a_adams\n// @author Mugen87 / https://github.com/Mugen87\n\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// prettier-ignore\nexport default function SphereGeometry(radius: number, widthSegments: number, heightSegments: number, phiStart: number, phiLength: number, thetaStart: number, thetaLength: number) {\n\n  radius = radius || 1\n\n  widthSegments = Math.max(3, Math.floor(widthSegments) || 8)\n  heightSegments = Math.max(2, Math.floor(heightSegments) || 6)\n\n  phiStart = phiStart !== undefined ? phiStart : 0\n  phiLength = phiLength !== undefined ? phiLength : Math.PI * 2\n\n  thetaStart = thetaStart !== undefined ? thetaStart : 0\n  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI\n\n  const thetaEnd = thetaStart + thetaLength\n\n  let ix, iy, index = 0\n\n  const grid = []\n\n  const vertex = new Array(3)\n  const normal = new Array(3)\n\n  const indices = []\n  const vertices = []\n  const normals = []\n  const uvs = []\n\n  for (iy = 0; iy <= heightSegments; iy ++) {\n\n    const verticesRow = []\n\n    const v = iy / heightSegments\n\n    const uOffset = (iy == 0) ? 0.5 / widthSegments : ((iy == heightSegments) ? - 0.5 / widthSegments : 0)\n\n    for (ix = 0; ix <= widthSegments; ix ++) {\n\n      const u = ix / widthSegments\n\n      vertex[0] = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\n      vertex[1] = radius * Math.cos(thetaStart + v * thetaLength)\n      vertex[2] = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\n\n      vertices.push(...vertex)\n\n      normal[0] = vertex[0]\n      normal[1] = vertex[1]\n      normal[2] = vertex[2]\n\n      const len = Math.sqrt(\n        normal[0] * normal[0] +\n        normal[1] * normal[1] + \n        normal[2] * normal[2]\n      )\n    \n      normal[0] *= 1 / (len || 1)\n      normal[1] *= 1 / (len || 1)\n      normal[2] *= 1 / (len || 1) \n\n      normals.push(...normal)\n\n      uvs.push(u + uOffset, 1 - v)\n      verticesRow.push(index ++)\n    }\n\n    grid.push(verticesRow)\n\n  }\n\n  for (iy = 0; iy < heightSegments; iy ++) {\n    for (ix = 0; ix < widthSegments; ix ++) {\n\n      const a = grid[iy][ix + 1]\n      const b = grid[iy][ix]\n      const c = grid[iy + 1][ix]\n      const d = grid[iy + 1][ix + 1]\n\n      if (iy !== 0 || thetaStart > 0) indices.push(a, b, d)\n      if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d)\n\n    }\n\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"],"file":"sphereGeometry.js"}