{"version":3,"sources":["../../src/planeGeometry.ts"],"names":["PlaneBufferGeometry","width","height","widthSegments","heightSegments","width_half","height_half","gridX","Math","floor","gridY","gridX1","gridY1","segment_width","segment_height","ix","iy","indices","vertices","normals","uvs","y","x","push","a","b","c","d"],"mappings":";;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACe,SAASA,mBAAT,CAA6BC,KAA7B,EAA4CC,MAA5C,EAA4DC,aAA5D,EAAmFC,cAAnF,EAA2G;AACxHH,EAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AAEA,MAAMG,UAAU,GAAGJ,KAAK,GAAG,CAA3B;AACA,MAAMK,WAAW,GAAGJ,MAAM,GAAG,CAA7B;AAEA,MAAMK,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,aAAX,KAA6B,CAA3C;AACA,MAAMO,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAWL,cAAX,KAA8B,CAA5C;AAEA,MAAMO,MAAM,GAAGJ,KAAK,GAAG,CAAvB;AACA,MAAMK,MAAM,GAAGF,KAAK,GAAG,CAAvB;AAEA,MAAMG,aAAa,GAAGZ,KAAK,GAAGM,KAA9B;AACA,MAAMO,cAAc,GAAGZ,MAAM,GAAGQ,KAAhC;AAEA,MAAIK,EAAJ,EAAQC,EAAR;AAEA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,GAAG,GAAG,EAAZ;;AAEA,OAAKJ,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGJ,MAAlB,EAA0BI,EAAE,EAA5B,EAAgC;AAC9B,QAAMK,CAAC,GAAGL,EAAE,GAAGF,cAAL,GAAsBR,WAAhC;;AAEA,SAAKS,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGJ,MAAlB,EAA0BI,EAAE,EAA5B,EAAgC;AAC9B,UAAMO,CAAC,GAAGP,EAAE,GAAGF,aAAL,GAAqBR,UAA/B;AAEAa,MAAAA,QAAQ,CAACK,IAAT,CAAcD,CAAd,EAAiB,CAACD,CAAlB,EAAqB,CAArB;AACAF,MAAAA,OAAO,CAACI,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AAEAH,MAAAA,GAAG,CAACG,IAAJ,CAASR,EAAE,GAAGR,KAAd;AACAa,MAAAA,GAAG,CAACG,IAAJ,CAAS,IAAIP,EAAE,GAAGN,KAAlB;AACD;AACF;;AAED,OAAKM,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGN,KAAlB,EAAyBM,EAAE,EAA3B,EAA+B;AAC7B,SAAKD,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGR,KAAlB,EAAyBQ,EAAE,EAA3B,EAA+B;AAC7B,UAAMS,CAAC,GAAGT,EAAE,GAAGJ,MAAM,GAAGK,EAAxB;AACA,UAAMS,CAAC,GAAGV,EAAE,GAAGJ,MAAM,IAAIK,EAAE,GAAG,CAAT,CAArB;AACA,UAAMU,CAAC,GAAGX,EAAE,GAAG,CAAL,GAASJ,MAAM,IAAIK,EAAE,GAAG,CAAT,CAAzB;AACA,UAAMW,CAAC,GAAGZ,EAAE,GAAG,CAAL,GAASJ,MAAM,GAAGK,EAA5B;AAEAC,MAAAA,OAAO,CAACM,IAAR,CAAaC,CAAb,EAAgBC,CAAhB,EAAmBE,CAAnB;AACAV,MAAAA,OAAO,CAACM,IAAR,CAAaE,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB;AACD;AACF;;AAED,SAAO;AAAEV,IAAAA,OAAO,EAAPA,OAAF;AAAWC,IAAAA,QAAQ,EAARA,QAAX;AAAqBC,IAAAA,OAAO,EAAPA,OAArB;AAA8BC,IAAAA,GAAG,EAAHA;AAA9B,GAAP;AACD","sourcesContent":["// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/PlaneGeometry.js\n\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// prettier-ignore\nexport default function PlaneBufferGeometry(width: number, height: number, widthSegments: number, heightSegments: number) {\n  width = width || 1\n  height = height || 1\n\n  const width_half = width / 2\n  const height_half = height / 2\n\n  const gridX = Math.floor(widthSegments) || 1\n  const gridY = Math.floor(heightSegments) || 1\n\n  const gridX1 = gridX + 1\n  const gridY1 = gridY + 1\n\n  const segment_width = width / gridX\n  const segment_height = height / gridY\n\n  let ix, iy\n\n  const indices = []\n  const vertices = []\n  const normals = []\n  const uvs = []\n\n  for (iy = 0; iy < gridY1; iy++) {\n    const y = iy * segment_height - height_half\n\n    for (ix = 0; ix < gridX1; ix++) {\n      const x = ix * segment_width - width_half\n\n      vertices.push(x, -y, 0)\n      normals.push(0, 0, 1)\n\n      uvs.push(ix / gridX)\n      uvs.push(1 - iy / gridY)\n    }\n  }\n\n  for (iy = 0; iy < gridY; iy++) {\n    for (ix = 0; ix < gridX; ix++) {\n      const a = ix + gridX1 * iy\n      const b = ix + gridX1 * (iy + 1)\n      const c = ix + 1 + gridX1 * (iy + 1)\n      const d = ix + 1 + gridX1 * iy\n\n      indices.push(a, b, d)\n      indices.push(b, c, d)\n    }\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"],"file":"planeGeometry.js"}