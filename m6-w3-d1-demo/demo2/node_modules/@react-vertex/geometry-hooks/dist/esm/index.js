import { useMemo } from 'react';
import { useStaticBuffer, useAttribute, useWebGLContext } from '@react-vertex/core';
import boxGeometry from './boxGeometry';
import circleGeometry from './circleGeometry';
import cylinderGeometry from './cylinderGeometry';
import planeGeometry from './planeGeometry';
import torusGeometry from './torusGeometry';
import sphereGeometry from './sphereGeometry';
export { boxGeometry, circleGeometry, cylinderGeometry, planeGeometry, torusGeometry, sphereGeometry };
export function useGeometryElements(geometry) {
  var gl = useWebGLContext();
  var positionBuffer = useStaticBuffer(gl, geometry.vertices, false, 'F32');
  var position = useAttribute(gl, 3, positionBuffer);
  var normalBuffer = useStaticBuffer(gl, geometry.normals, false, 'F32');
  var normal = useAttribute(gl, 3, normalBuffer);
  var uvBuffer = useStaticBuffer(gl, geometry.uvs, false, 'F32');
  var uv = useAttribute(gl, 2, uvBuffer);
  var indexBuffer = useStaticBuffer(gl, geometry.indices, true, 'U16');
  var elements = useMemo(function () {
    return {
      index: indexBuffer,
      count: geometry.indices.length,
      attributes: {
        position: position,
        normal: normal,
        uv: uv
      },
      drawElements: {
        mode: 'TRIANGLES',
        count: geometry.indices.length
      }
    };
  }, [indexBuffer, geometry.indices.length, position, normal, uv]);
  return elements;
}
export function useBoxGeometry(width, height, depth, wCount, hCount, dCount) {
  var memoized = useMemo(function () {
    return boxGeometry(width, height, depth, wCount, hCount, dCount);
  }, [width, height, depth, wCount, hCount, dCount]);
  return memoized;
}
export function useBoxElements(width, height, depth, wCount, hCount, dCount) {
  var geom = useBoxGeometry(width, height, depth, wCount, hCount, dCount);
  var elements = useGeometryElements(geom);
  return elements;
}
export function useCircleGeometry(radius, segments, thetaStart, thetaLength) {
  var memoized = useMemo(function () {
    return circleGeometry(radius, segments, thetaStart, thetaLength);
  }, [radius, segments, thetaStart, thetaLength]);
  return memoized;
}
export function useCircleElements(radius, segments, thetaStart, thetaLength) {
  var geom = useCircleGeometry(radius, segments, thetaStart, thetaLength);
  var elements = useGeometryElements(geom);
  return elements;
}
export function useCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
  var memoized = useMemo(function () {
    return cylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
  }, [radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength]);
  return memoized;
}
export function useCylinderElements(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
  var geom = useCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
  var elements = useGeometryElements(geom);
  return elements;
}
export function usePlaneGeometry(width, height, widthSegments, heightSegments) {
  var memoized = useMemo(function () {
    return planeGeometry(width, height, widthSegments, heightSegments);
  }, [width, height, widthSegments, heightSegments]);
  return memoized;
}
export function usePlaneElements(width, height, widthSegments, heightSegments) {
  var geom = usePlaneGeometry(width, height, widthSegments, heightSegments);
  var elements = useGeometryElements(geom);
  return elements;
}
export function useTorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {
  var memoized = useMemo(function () {
    return torusGeometry(radius, tube, radialSegments, tubularSegments, arc);
  }, [radius, tube, radialSegments, tubularSegments, arc]);
  return memoized;
}
export function useTorusElements(radius, tube, radialSegments, tubularSegments, arc) {
  var geom = useTorusGeometry(radius, tube, radialSegments, tubularSegments, arc);
  var elements = useGeometryElements(geom);
  return elements;
}
export function useSphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
  var memoized = useMemo(function () {
    return sphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
  }, [radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength]);
  return memoized;
}
export function useSphereElements(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
  var geom = useSphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
  var elements = useGeometryElements(geom);
  return elements;
}
//# sourceMappingURL=index.js.map