// Adapted from:
// https://github.com/mrdoob/three.js/blob/dev/src/geometries/CylinderGeometry.js
// @author mrdoob / http://mrdoob.com/
// @author Mugen87 / https://github.com/Mugen87
// The MIT License
// Copyright Â© 2010-2019 three.js authors
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2
export default function cylinderGeometry() {
  var radiusTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var radiusBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
  var heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
  var openEnded = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var thetaStart = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
  var thetaLength = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : Math.PI * 2;
  var rSegments = Math.floor(radialSegments || 8);
  var hSegments = Math.floor(heightSegments || 1);
  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = [];
  var index = 0;
  var indexArray = [];
  var halfHeight = height / 2;
  generateTorso();

  if (openEnded === false) {
    if (radiusTop > 0) generateCap(true);
    if (radiusBottom > 0) generateCap(false);
  }

  function generateTorso() {
    var x, y;
    var normal = new Array(3);
    var vertex = new Array(3);
    var slope = (radiusBottom - radiusTop) / height;

    for (y = 0; y <= hSegments; y++) {
      var indexRow = [];
      var v = y / hSegments;
      var radius = v * (radiusBottom - radiusTop) + radiusTop;

      for (x = 0; x <= rSegments; x++) {
        var u = x / rSegments;
        var theta = u * thetaLength + thetaStart;
        var sinTheta = Math.sin(theta);
        var cosTheta = Math.cos(theta);
        vertex[0] = radius * sinTheta;
        vertex[1] = -v * height + halfHeight;
        vertex[2] = radius * cosTheta;
        vertices.push.apply(vertices, vertex);
        normal[0] = sinTheta;
        normal[1] = slope;
        normal[2] = cosTheta;
        var len = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);
        normal[0] *= 1 / (len || 1);
        normal[1] *= 1 / (len || 1);
        normal[2] *= 1 / (len || 1);
        normals.push.apply(normals, normal);
        uvs.push(u, 1 - v);
        indexRow.push(index++);
      }

      indexArray.push(indexRow);
    }

    for (x = 0; x < rSegments; x++) {
      for (y = 0; y < hSegments; y++) {
        var a = indexArray[y][x];
        var b = indexArray[y + 1][x];
        var c = indexArray[y + 1][x + 1];
        var d = indexArray[y][x + 1];
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
  }

  function generateCap(top) {
    var x, centerIndexStart, centerIndexEnd;
    var uv = new Array(2);
    var vertex = new Array(3);
    var radius = top === true ? radiusTop : radiusBottom;
    var sign = top === true ? 1 : -1;
    centerIndexStart = index;

    for (x = 1; x <= rSegments; x++) {
      vertices.push(0, halfHeight * sign, 0);
      normals.push(0, sign, 0);
      uvs.push(0.5, 0.5);
      index++;
    }

    centerIndexEnd = index;

    for (x = 0; x <= rSegments; x++) {
      var u = x / rSegments;
      var theta = u * thetaLength + thetaStart;
      var cosTheta = Math.cos(theta);
      var sinTheta = Math.sin(theta);
      vertex[0] = radius * sinTheta;
      vertex[1] = halfHeight * sign;
      vertex[2] = radius * cosTheta;
      vertices.push.apply(vertices, vertex);
      normals.push(0, sign, 0);
      uv[0] = cosTheta * 0.5 + 0.5;
      uv[1] = sinTheta * 0.5 * sign + 0.5;
      uvs.push.apply(uvs, uv);
      index++;
    }

    for (x = 0; x < rSegments; x++) {
      var c = centerIndexStart + x;
      var i = centerIndexEnd + x;

      if (top === true) {
        indices.push(i, i + 1, c);
      } else {
        indices.push(i + 1, i, c);
      }
    }
  }

  return {
    indices: indices,
    vertices: vertices,
    normals: normals,
    uvs: uvs
  };
}
//# sourceMappingURL=cylinderGeometry.js.map