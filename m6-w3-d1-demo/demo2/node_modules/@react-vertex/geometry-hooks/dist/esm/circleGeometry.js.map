{"version":3,"sources":["../../src/circleGeometry.ts"],"names":["circleGeometry","radius","segments","thetaStart","thetaLength","Math","PI","max","indices","vertices","normals","uvs","i","s","vertex","Array","uv","push","segment","cos","sin"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe,SAASA,cAAT,GAKb;AAAA,MAJAC,MAIA,uEAJiB,CAIjB;AAAA,MAHAC,QAGA,uEAHmB,CAGnB;AAAA,MAFAC,UAEA,uEAFqB,CAErB;AAAA,MADAC,WACA,uEADsBC,IAAI,CAACC,EAAL,GAAU,CAChC;AACAJ,EAAAA,QAAQ,GAAGG,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYL,QAAZ,CAAX;AAEA,MAAMM,OAAO,GAAG,EAAhB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,GAAG,GAAG,EAAZ;AAEA,MAAIC,CAAJ,EAAOC,CAAP;AAEA,MAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAf;AACA,MAAMC,EAAE,GAAG,IAAID,KAAJ,CAAU,CAAV,CAAX;AAEAN,EAAAA,QAAQ,CAACQ,IAAT,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;AACAP,EAAAA,OAAO,CAACO,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AACAN,EAAAA,GAAG,CAACM,IAAJ,CAAS,GAAT,EAAc,GAAd;;AAEA,OAAKJ,CAAC,GAAG,CAAJ,EAAOD,CAAC,GAAG,CAAhB,EAAmBC,CAAC,IAAIX,QAAxB,EAAkCW,CAAC,IAAID,CAAC,IAAI,CAA5C,EAA+C;AAC7C,QAAIM,OAAO,GAAGf,UAAU,GAAIU,CAAC,GAAGX,QAAL,GAAiBE,WAA5C;AAEAU,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYb,MAAM,GAAGI,IAAI,CAACc,GAAL,CAASD,OAAT,CAArB;AACAJ,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYb,MAAM,GAAGI,IAAI,CAACe,GAAL,CAASF,OAAT,CAArB;AAEAT,IAAAA,QAAQ,CAACQ,IAAT,CAAcH,MAAM,CAAC,CAAD,CAApB,EAAyBA,MAAM,CAAC,CAAD,CAA/B,EAAoC,CAApC;AACAJ,IAAAA,OAAO,CAACO,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AACAD,IAAAA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACP,QAAQ,CAACG,CAAD,CAAR,GAAcX,MAAd,GAAuB,CAAxB,IAA6B,CAArC;AACAe,IAAAA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACP,QAAQ,CAACG,CAAC,GAAG,CAAL,CAAR,GAAkBX,MAAlB,GAA2B,CAA5B,IAAiC,CAAzC;AAEAU,IAAAA,GAAG,CAACM,IAAJ,CAASD,EAAE,CAAC,CAAD,CAAX,EAAgBA,EAAE,CAAC,CAAD,CAAlB;AACD;;AAED,OAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAIV,QAAjB,EAA2BU,CAAC,EAA5B,EAAgC;AAC9BJ,IAAAA,OAAO,CAACS,IAAR,CAAaL,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,CAAvB;AACD;;AAED,SAAO;AAAEJ,IAAAA,OAAO,EAAPA,OAAF;AAAWC,IAAAA,QAAQ,EAARA,QAAX;AAAqBC,IAAAA,OAAO,EAAPA,OAArB;AAA8BC,IAAAA,GAAG,EAAHA;AAA9B,GAAP;AACD","sourcesContent":["// Adapted from:\n//https://github.com/mrdoob/three.js/blob/dev/src/geometries/CircleGeometry.js\n\n// @author benaadams / https://twitter.com/ben_a_adams\n// @author Mugen87 / https://github.com/Mugen87\n// @author hughes\n\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default function circleGeometry(\n  radius: number = 1,\n  segments: number = 8,\n  thetaStart: number = 0,\n  thetaLength: number = Math.PI * 2,\n) {\n  segments = Math.max(3, segments)\n\n  const indices = []\n  const vertices = []\n  const normals = []\n  const uvs = []\n\n  let i, s\n\n  const vertex = new Array(3)\n  const uv = new Array(2)\n\n  vertices.push(0, 0, 0)\n  normals.push(0, 0, 1)\n  uvs.push(0.5, 0.5)\n\n  for (s = 0, i = 3; s <= segments; s++, i += 3) {\n    var segment = thetaStart + (s / segments) * thetaLength\n\n    vertex[0] = radius * Math.cos(segment)\n    vertex[1] = radius * Math.sin(segment)\n\n    vertices.push(vertex[0], vertex[1], 0)\n    normals.push(0, 0, 1)\n    uv[0] = (vertices[i] / radius + 1) / 2\n    uv[1] = (vertices[i + 1] / radius + 1) / 2\n\n    uvs.push(uv[0], uv[1])\n  }\n\n  for (i = 1; i <= segments; i++) {\n    indices.push(i, i + 1, 0)\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"],"file":"circleGeometry.js"}