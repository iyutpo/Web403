import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useRef, useState, useEffect } from 'react';
import ResizeObserver from 'resize-observer-polyfill';
var isBrowser = typeof window !== 'undefined';
export function useMeasure(ref) {
  var _useState = useState({
    left: 0,
    top: 0,
    width: 0,
    height: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      bounds = _useState2[0],
      set = _useState2[1];

  var resizeObserver = useRef(new ResizeObserver(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        entry = _ref2[0];

    return set(entry.contentRect);
  }));
  useEffect(function () {
    var observer = resizeObserver.current;

    if (ref.current) {
      observer.observe(ref.current);
    }

    return function () {
      return observer.disconnect();
    };
  }, [ref.current, resizeObserver]);
  return bounds;
}
export function useViewportSize() {
  var _useState3 = useState({
    width: isBrowser ? window.innerWidth : 1,
    height: isBrowser ? window.innerHeight : 1
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      dimensions = _useState4[0],
      setDimensions = _useState4[1];

  useEffect(function () {
    var updateDimensions = function updateDimensions() {
      setDimensions({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };

    isBrowser && window.addEventListener('resize', updateDimensions);
    return function () {
      isBrowser && window.removeEventListener('resize', updateDimensions);
    };
  }, [setDimensions]);
  return dimensions;
}